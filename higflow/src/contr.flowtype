hig-flow-bc.c:        sim_domain *sd = psd_get_local_domain(ns->psdp);
hig-flow-bc.c:            real t = ns->par.t + ns->par.dt;
hig-flow-bc.c:            //     val = ns->func.get_boundary_pressure(id[h], bccenter, ns->par.t);
hig-flow-bc.c:            //     if (ns->contr.projtype == 0) {
hig-flow-bc.c:            //          val = ns->func.get_boundary_pressure(id[h], bccenter, ns->par.t);
hig-flow-bc.c:            //          val = ns->func.get_boundary_pressure(id[h], bccenter, t) - ns->func.get_boundary_pressure(id[h], bccenter, ns->par.t);
hig-flow-bc.c:            val = ns->func.get_boundary_pressure(id[h], bccenter, ns->par.t);
hig-flow-bc.c:            sfd = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-bc.c:                real bcval = ns->func.get_boundary_velocity(id[h], bccenter, dim, ns->par.t);
hig-flow-bc.c:        psfd_compute_sfbi(ns->psfdu[dim]);
hig-flow-bc.c:        psfd_synced_mapper(ns->psfdu[dim]);
hig-flow-bc.c:            sfd = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-bc.c:                real bcval = ns->ed.eo.get_boundary_electroosmotic_source_term(id[h], bccenter, dim, ns->par.t);
hig-flow-bc.c:        psfd_compute_sfbi(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-bc.c:        psfd_synced_mapper(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-bc.c:        sim_domain *sd = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-bc.c:            real t = ns->par.t + ns->par.dt;
hig-flow-bc.c:                val = ns->ed.eo.get_boundary_electroosmotic_phi(id[h], bccenter, ns->par.t);
hig-flow-bc.c:                val = ns->ed.eo.get_boundary_electroosmotic_phi(id[h], bccenter, ns->par.t);
hig-flow-bc.c:        sim_domain *sd = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-bc.c:            real t = ns->par.t + ns->par.dt;
hig-flow-bc.c:                val = ns->ed.eo.get_boundary_electroosmotic_psi(id[h], bccenter, ns->par.t);
hig-flow-bc.c:                val = ns->ed.eo.get_boundary_electroosmotic_psi(id[h], bccenter, ns->par.t);
hig-flow-bc.c:        sim_domain *sd = psd_get_local_domain(ns->ed.eo.psdEOnplus);
hig-flow-bc.c:            real t = ns->par.t + ns->par.dt;
hig-flow-bc.c:                val = ns->ed.eo.get_boundary_electroosmotic_nplus(id[h], bccenter, ns->par.t);
hig-flow-bc.c:                val = ns->ed.eo.get_boundary_electroosmotic_nplus(id[h], bccenter, ns->par.t);
hig-flow-bc.c:        sim_domain *sd = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-bc.c:            real t = ns->par.t + ns->par.dt;
hig-flow-bc.c:                val = ns->ed.eo.get_boundary_electroosmotic_nminus(id[h], bccenter, ns->par.t);
hig-flow-bc.c:                val = ns->ed.eo.get_boundary_electroosmotic_nminus(id[h], bccenter, ns->par.t);
hig-flow-bc.c:        sim_domain *sd = psd_get_local_domain(ns->psdF);
hig-flow-bc.c:            real val = ns->func.get_boundary_source_term(id[h], bccenter, ns->par.t);
hig-flow-bc.c:            sfdF = psfd_get_local_domain(ns->psfdF[dim]);
hig-flow-bc.c:                real bcval = ns->func.get_boundary_facet_source_term(id[h], bccenter, dim, ns->par.t);
hig-flow-bc.c:        psfd_compute_sfbi(ns->psfdF[dim]);
hig-flow-bc.c:        psfd_synced_mapper(ns->psfdF[dim]);
hig-flow-bc.c:    sprintf(namefile,"%s.bc",ns->par.nameload);
hig-flow-bc.c:    ns->contr.desingpressure = 1;
hig-flow-bc.c:            ns->contr.desingpressure = 0;
hig-flow-bc.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-bc.c:        sprintf(namefile,"%s.bcelectroosmotic",ns->par.nameload);
hig-flow-discret.c:    switch (ns->contr.spatialdiscrtype) {
hig-flow-discret.c:            ns->cc.convec_type = ns->contr.convecdiscrtype;
hig-flow-discret.c:            ns->cc.ucell  = dp_get_value(dpu[dim], fgid);
hig-flow-discret.c:            ns->cc.F      = compute_facet_value_at_point(ns->sfdF[dim], fcenter, fcenter, 1.0, ns->dpFU[dim], ns->stnF); 
hig-flow-discret.c:            pl            = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            pr            = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            ns->cc.dpdx   = compute_dpdx_at_point(fdelta, dim, 0.5, pl, pr);
hig-flow-discret.c:            Fl            = compute_center_p_left(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            Fr            = compute_center_p_right(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            ns->cc.F     += compute_value_at_mid_point(Fl, Fr);
hig-flow-discret.c:                      ns->cc.v[dim2] = ns->cc.ucell;
hig-flow-discret.c:                      ns->cc.v[dim2] = compute_facet_u_2(sfdu[dim2], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                 ul[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet_l);
hig-flow-discret.c:                 ur[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet_r);         
hig-flow-discret.c:                 ns->cc.dudxc[dim2]  = compute_facet_dudxc(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxl[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 if ((infacet_l == 0)){// && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ul[dim2] = compute_facet_u_2_left(sfdu[dim], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                      ns->cc.dudxl[dim2]  = compute_facet_dudxl(fdelta, dim2, 0.5, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                      //ns->cc.convec_type = 1;
hig-flow-discret.c:                 if ((infacet_r == 0)){// && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ur[dim2] = compute_facet_u_2_right(sfdu[dim], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                      ns->cc.dudxr[dim2]  = compute_facet_dudxl(fdelta, dim2, 0.5, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                      //ns->cc.convec_type = 1;
hig-flow-discret.c:                 urr[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 ull[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if (ns->cc.convec_type == 2) {
hig-flow-discret.c:                     if (ns->contr.secondconvecdiscrtype == 2) {
hig-flow-discret.c:                         ns->cc.dudxrr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ur[dim2], ns->cc.ucell, urr[dim2]);
hig-flow-discret.c:                         ns->cc.dudxll[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ul[dim2], ull[dim2], ns->cc.ucell);
hig-flow-discret.c:                     }else if (ns->contr.secondconvecdiscrtype == 1){
hig-flow-discret.c:                         ul[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         ull[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_ll);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ur[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         urr[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_rr);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_right(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                                 conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + b*ur[dim] -d*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(e*ns->cc.ucell + c*ur[dim]);
hig-flow-discret.c:                             if (fabs(ns->cc.ucell - urr[dim]) <= tol){
hig-flow-discret.c:	                         conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(a*ur[dim] - c*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(c*ur[dim] + b*ns->cc.ucell -d*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ur[dim]);
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_left(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                             if (fabs(ns->cc.ucell-ull[dim]) <= tol) {
hig-flow-discret.c:	                         conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                         fi = (ul[dim] - ull[dim])/(ns->cc.ucell-ull[dim]);
hig-flow-discret.c:	                             conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(a*ul[dim] - c*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(b*ns->cc.ucell + c*ul[dim] - d*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ul[dim]);
hig-flow-discret.c:                                 conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ur[dim])/(ul[dim] - ur[dim]);
hig-flow-discret.c:                                     conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(b*ul[dim] + c*ns->cc.ucell - d*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(c*ul[dim] + e*ns->cc.ucell);
hig-flow-discret.c:                         ns->cc.vc[dim2] = ((conv1-conv2)/fdelta[dim]); 
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] = compute_facet_du2dx2(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:    switch (ns->contr.spatialdiscrtype) {
hig-flow-discret.c:            ns->cc.convec_type = ns->contr.convecdiscrtype;
hig-flow-discret.c:            ns->cc.ucell  = dp_get_value(dpu[dim], fgid);
hig-flow-discret.c:            ns->cc.F      = compute_facet_value_at_point(ns->sfdF[dim], fcenter, fcenter, 1.0, ns->dpFU[dim], ns->stnF); 
hig-flow-discret.c:            pl            = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            pr            = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            ns->cc.dpdx   = compute_dpdx_at_point(fdelta, dim, 0.5, pl, pr);
hig-flow-discret.c:            Fl            = compute_center_p_left(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            Fr            = compute_center_p_right(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            ns->cc.F     += compute_value_at_mid_point(Fl, Fr);
hig-flow-discret.c:            viscl         = compute_center_p_left(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.visc.dpvisc, ns->ed.stn);
hig-flow-discret.c:            //viscl         = compute_center_p_left(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.visc.dpvisc, ns->stn);
hig-flow-discret.c:            viscr         = compute_center_p_right(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.visc.dpvisc, ns->ed.stn);
hig-flow-discret.c:            //viscr         = compute_center_p_right(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.visc.dpvisc, ns->stn);
hig-flow-discret.c:                      ns->cc.v[dim2] = ns->cc.ucell;
hig-flow-discret.c:                      ns->cc.v[dim2] = compute_facet_u_2(sfdu[dim2], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                 ul[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if ((infacet == 0) && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ns->cc.convec_type = 1;
hig-flow-discret.c:                 ur[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);         
hig-flow-discret.c:                 if ((infacet == 0) && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ns->cc.convec_type = 1;
hig-flow-discret.c:                 ns->cc.dudxc[dim2]  = compute_facet_dudxc(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxl[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 urr[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 ull[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if (ns->cc.convec_type == 2) {
hig-flow-discret.c:                     if (ns->contr.secondconvecdiscrtype == 2) {
hig-flow-discret.c:                         ns->cc.dudxrr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ur[dim2], ns->cc.ucell, urr[dim2]);
hig-flow-discret.c:                         ns->cc.dudxll[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ul[dim2], ull[dim2], ns->cc.ucell);
hig-flow-discret.c:                     }else if (ns->contr.secondconvecdiscrtype == 1){
hig-flow-discret.c:                         ul[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         ull[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_ll);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ur[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         urr[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_rr);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_right(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                                 conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + b*ur[dim] -d*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(e*ns->cc.ucell + c*ur[dim]);
hig-flow-discret.c:                             if (fabs(ns->cc.ucell - urr[dim]) <= tol){
hig-flow-discret.c:	                         conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(a*ur[dim] - c*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(c*ur[dim] + b*ns->cc.ucell -d*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ur[dim]);
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_left(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                             if (fabs(ns->cc.ucell-ull[dim]) <= tol) {
hig-flow-discret.c:	                         conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                         fi = (ul[dim] - ull[dim])/(ns->cc.ucell-ull[dim]);
hig-flow-discret.c:	                             conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(a*ul[dim] - c*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(b*ns->cc.ucell + c*ul[dim] - d*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ul[dim]);
hig-flow-discret.c:                                 conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ur[dim])/(ul[dim] - ur[dim]);
hig-flow-discret.c:                                     conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(b*ul[dim] + c*ns->cc.ucell - d*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(c*ul[dim] + e*ns->cc.ucell);
hig-flow-discret.c:                         ns->cc.vc[dim2] = ((conv1-conv2)/fdelta[dim]); 
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] = 0.0;
hig-flow-discret.c:                 real ucl   = compute_facet_u_left(sfdu[dim], p, fdelta, dim2, 0.5, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 real ucr   = compute_facet_u_right(sfdu[dim], p, fdelta, dim2, 0.5, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 real dudxr = compute_facet_dudxc(fdelta, dim2, 0.5, ns->cc.ucell, ucl, ucr);
hig-flow-discret.c:                 real vcl   = compute_facet_u_left(sfdu[dim2], p, fdelta, dim, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                 real vcr   = compute_facet_u_right(sfdu[dim2], p, fdelta, dim, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                 real dvdxr = compute_facet_dudxc(fdelta, dim, 0.5, ns->cc.ucell, vcl, vcr);
hig-flow-discret.c:                 ucl        = compute_facet_u_left(sfdu[dim], p, fdelta, dim2, 0.5, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 ucr        = compute_facet_u_right(sfdu[dim], p, fdelta, dim2, 0.5, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 real dudxl = compute_facet_dudxc(fdelta, dim2, 0.5, ns->cc.ucell, ucl, ucr);
hig-flow-discret.c:                 vcl        = compute_facet_u_left(sfdu[dim2], p, fdelta, dim, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                 vcr        = compute_facet_u_right(sfdu[dim2], p, fdelta, dim, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                 real dvdxl = compute_facet_dudxc(fdelta, dim, 0.5, ns->cc.ucell, vcl, vcr);
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] += (viscr*dudxr - viscl*dudxl)/fdelta[dim2];
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] += (viscr*dvdxr - viscl*dvdxl)/fdelta[dim2];
hig-flow-discret.c:    switch (ns->contr.spatialdiscrtype) {
hig-flow-discret.c:            ns->cc.convec_type = ns->contr.convecdiscrtype;
hig-flow-discret.c:            ns->cc.ucell  = dp_get_value(dpu[dim], fgid);
hig-flow-discret.c:            ns->cc.F      = compute_facet_value_at_point(ns->sfdF[dim], fcenter, fcenter, 1.0, ns->dpFU[dim], ns->stnF); 
hig-flow-discret.c:            pl            = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            pr            = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            ns->cc.dpdx   = compute_dpdx_at_point(fdelta, dim, 0.5, pl, pr);
hig-flow-discret.c:            Fl            = compute_center_p_left(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            Fr            = compute_center_p_right(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            ns->cc.F     += compute_value_at_mid_point(Fl, Fr);
hig-flow-discret.c:            viscl         = compute_center_p_left(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.visc.dpvisc, ns->ed.stn);
hig-flow-discret.c:            viscr         = compute_center_p_right(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.visc.dpvisc, ns->ed.stn);
hig-flow-discret.c:            rhol          = compute_center_p_left(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.dens.dpdens, ns->ed.stn);
hig-flow-discret.c:            rhor          = compute_center_p_right(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.dens.dpdens, ns->ed.stn);
hig-flow-discret.c:            ns->cc.dens   = compute_value_at_mid_point(rhol, rhor);
hig-flow-discret.c:                      ns->cc.v[dim2] = ns->cc.ucell;
hig-flow-discret.c:                      ns->cc.v[dim2] = compute_facet_u_2(sfdu[dim2], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                 ul[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if ((infacet == 0) && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ns->cc.convec_type = 1;
hig-flow-discret.c:                 ur[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);         
hig-flow-discret.c:                 if ((infacet == 0) && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ns->cc.convec_type = 1;
hig-flow-discret.c:                 ns->cc.dudxc[dim2]  = compute_facet_dudxc(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxl[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 urr[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 ull[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if (ns->cc.convec_type == 2) {
hig-flow-discret.c:                     if (ns->contr.secondconvecdiscrtype == 2) {
hig-flow-discret.c:                         ns->cc.dudxrr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ur[dim2], ns->cc.ucell, urr[dim2]);
hig-flow-discret.c:                         ns->cc.dudxll[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ul[dim2], ull[dim2], ns->cc.ucell);
hig-flow-discret.c:                     }else if (ns->contr.secondconvecdiscrtype == 1){
hig-flow-discret.c:                         ul[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         ull[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_ll);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ur[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         urr[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_rr);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_right(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                                 conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + b*ur[dim] -d*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(e*ns->cc.ucell + c*ur[dim]);
hig-flow-discret.c:                             if (fabs(ns->cc.ucell - urr[dim]) <= tol){
hig-flow-discret.c:	                         conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(a*ur[dim] - c*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(c*ur[dim] + b*ns->cc.ucell -d*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ur[dim]);
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_left(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                             if (fabs(ns->cc.ucell-ull[dim]) <= tol) {
hig-flow-discret.c:	                         conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                         fi = (ul[dim] - ull[dim])/(ns->cc.ucell-ull[dim]);
hig-flow-discret.c:	                             conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(a*ul[dim] - c*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(b*ns->cc.ucell + c*ul[dim] - d*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ul[dim]);
hig-flow-discret.c:                                 conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ur[dim])/(ul[dim] - ur[dim]);
hig-flow-discret.c:                                     conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(b*ul[dim] + c*ns->cc.ucell - d*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(c*ul[dim] + e*ns->cc.ucell);
hig-flow-discret.c:                         ns->cc.vc[dim2] = ((conv1-conv2)/fdelta[dim]); 
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] = 0.0;
hig-flow-discret.c:                 real ucl   = compute_facet_u_left(sfdu[dim], p, fdelta, dim2, 0.5, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 real ucr   = compute_facet_u_right(sfdu[dim], p, fdelta, dim2, 0.5, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 real dudxr = compute_facet_dudxc(fdelta, dim2, 0.5, ns->cc.ucell, ucl, ucr);
hig-flow-discret.c:                 real vcl   = compute_facet_u_left(sfdu[dim2], p, fdelta, dim, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                 real vcr   = compute_facet_u_right(sfdu[dim2], p, fdelta, dim, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                 real dvdxr = compute_facet_dudxc(fdelta, dim, 0.5, ns->cc.ucell, vcl, vcr);
hig-flow-discret.c:                 ucl        = compute_facet_u_left(sfdu[dim], p, fdelta, dim2, 0.5, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 ucr        = compute_facet_u_right(sfdu[dim], p, fdelta, dim2, 0.5, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 real dudxl = compute_facet_dudxc(fdelta, dim2, 0.5, ns->cc.ucell, ucl, ucr);
hig-flow-discret.c:                 vcl        = compute_facet_u_left(sfdu[dim2], p, fdelta, dim, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                 vcr        = compute_facet_u_right(sfdu[dim2], p, fdelta, dim, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                 real dvdxl = compute_facet_dudxc(fdelta, dim, 0.5, ns->cc.ucell, vcl, vcr);
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] += (viscr*dudxr - viscl*dudxl)/fdelta[dim2];
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] += (viscr*dvdxr - viscl*dvdxl)/fdelta[dim2];
hig-flow-discret.c:    switch (ns->contr.spatialdiscrtype) {
hig-flow-discret.c:            ns->cc.convec_type = ns->contr.convecdiscrtype;
hig-flow-discret.c:            ns->cc.ucell  = dp_get_value(dpu[dim], fgid);
hig-flow-discret.c:            ns->cc.F      = compute_facet_value_at_point(ns->sfdF[dim], fcenter, fcenter, 1.0, ns->dpFU[dim], ns->stnF); 
hig-flow-discret.c:            pl            = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            pr            = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            ns->cc.dpdx   = compute_dpdx_at_point(fdelta, dim, 0.5, pl, pr);
hig-flow-discret.c:            Fl            = compute_center_p_left(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            Fr            = compute_center_p_right(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            ns->cc.F     += compute_value_at_mid_point(Fl, Fr);
hig-flow-discret.c:                      ns->cc.v[dim2] = ns->cc.ucell;
hig-flow-discret.c:                      ns->cc.v[dim2] = compute_facet_u_2(sfdu[dim2], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                 ul[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if ((infacet == 0) && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ns->cc.convec_type = 1;
hig-flow-discret.c:                 ur[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);         
hig-flow-discret.c:                 if ((infacet == 0) && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ns->cc.convec_type = 1;
hig-flow-discret.c:                 ns->cc.dudxc[dim2]  = compute_facet_dudxc(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxl[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 urr[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 ull[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if (ns->cc.convec_type == 2) {
hig-flow-discret.c:                     if (ns->contr.secondconvecdiscrtype == 2) {
hig-flow-discret.c:                         ns->cc.dudxrr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ur[dim2], ns->cc.ucell, urr[dim2]);
hig-flow-discret.c:                         ns->cc.dudxll[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ul[dim2], ull[dim2], ns->cc.ucell);
hig-flow-discret.c:                     }else if (ns->contr.secondconvecdiscrtype == 1){
hig-flow-discret.c:                         ul[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         ull[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_ll);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ur[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         urr[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_rr);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_right(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                                 conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + b*ur[dim] -d*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(e*ns->cc.ucell + c*ur[dim]);
hig-flow-discret.c:                             if (fabs(ns->cc.ucell - urr[dim]) <= tol){
hig-flow-discret.c:	                         conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(a*ur[dim] - c*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(c*ur[dim] + b*ns->cc.ucell -d*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ur[dim]);
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_left(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                             if (fabs(ns->cc.ucell-ull[dim]) <= tol) {
hig-flow-discret.c:	                         conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                         fi = (ul[dim] - ull[dim])/(ns->cc.ucell-ull[dim]);
hig-flow-discret.c:	                             conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(a*ul[dim] - c*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(b*ns->cc.ucell + c*ul[dim] - d*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ul[dim]);
hig-flow-discret.c:                                 conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ur[dim])/(ul[dim] - ur[dim]);
hig-flow-discret.c:                                     conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(b*ul[dim] + c*ns->cc.ucell - d*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(c*ul[dim] + e*ns->cc.ucell);
hig-flow-discret.c:                         ns->cc.vc[dim2] = ((conv1-conv2)/fdelta[dim]); 
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] = compute_facet_du2dx2(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                     Sl[dim2]          = compute_center_p_left(ns->ed.sdED, fcenter, fdelta, dim2, 0.5, ns->ed.ve.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                     Sr[dim2]          = compute_center_p_right(ns->ed.sdED, fcenter, fdelta, dim2, 0.5, ns->ed.ve.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                     ns->cc.dSdx[dim2] = compute_dpdx_at_point(fdelta, dim2, 0.5, Sl[dim2], Sr[dim2]);
hig-flow-discret.c:                     Sl[dim2]          = compute_center_p_left_2(ns->ed.sdED, fcenter, fdelta, dim, dim2, 1.0, ns->ed.ve.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                     Sr[dim2]          = compute_center_p_right_2(ns->ed.sdED, fcenter, fdelta, dim, dim2, 1.0, ns->ed.ve.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                     ns->cc.dSdx[dim2] = compute_dpdx_at_point(fdelta, dim2, 1.0, Sl[dim2], Sr[dim2]);
hig-flow-discret.c:    switch (ns->contr.spatialdiscrtype) {
hig-flow-discret.c:            ns->cc.convec_type = ns->contr.convecdiscrtype;
hig-flow-discret.c:            ns->cc.ucell  = dp_get_value(dpu[dim], fgid);
hig-flow-discret.c:            ns->cc.F      = compute_facet_value_at_point(ns->sfdF[dim], fcenter, fcenter, 1.0, ns->dpFU[dim], ns->stnF); 
hig-flow-discret.c:            pl            = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            pr            = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            ns->cc.dpdx   = compute_dpdx_at_point(fdelta, dim, 0.5, pl, pr);
hig-flow-discret.c:            Fl            = compute_center_p_left(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            Fr            = compute_center_p_right(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            ns->cc.F      += compute_value_at_mid_point(Fl, Fr);
hig-flow-discret.c:            ns->cc.Feo   = compute_facet_value_at_point(ns->ed.eo.sfdEOFeo[dim], fcenter, fcenter, 1.0, ns->ed.eo.dpFeo[dim], ns->ed.stn); 
hig-flow-discret.c:                      ns->cc.v[dim2] = ns->cc.ucell;
hig-flow-discret.c:                      ns->cc.v[dim2] = compute_facet_u_2(sfdu[dim2], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                 ul[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet_l);
hig-flow-discret.c:                 ur[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet_r);         
hig-flow-discret.c:                 ns->cc.dudxc[dim2]  = compute_facet_dudxc(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxl[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 if ((infacet_l == 0)){// && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ul[dim2] = compute_facet_u_2_left(sfdu[dim], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                      ns->cc.dudxl[dim2]  = compute_facet_dudxl(fdelta, dim2, 0.5, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                      //ns->cc.convec_type = 1;
hig-flow-discret.c:                 if ((infacet_r == 0)){// && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ur[dim2] = compute_facet_u_2_right(sfdu[dim], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                      ns->cc.dudxr[dim2]  = compute_facet_dudxl(fdelta, dim2, 0.5, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                      //ns->cc.convec_type = 1;
hig-flow-discret.c:                 urr[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 ull[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if (ns->cc.convec_type == 2) {
hig-flow-discret.c:                     if (ns->contr.secondconvecdiscrtype == 2) {
hig-flow-discret.c:                         ns->cc.dudxrr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ur[dim2], ns->cc.ucell, urr[dim2]);
hig-flow-discret.c:                         ns->cc.dudxll[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ul[dim2], ull[dim2], ns->cc.ucell);
hig-flow-discret.c:                     }else if (ns->contr.secondconvecdiscrtype == 1){
hig-flow-discret.c:                         ul[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         ull[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_ll);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ur[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         urr[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_rr);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_right(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                                 conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + b*ur[dim] -d*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(e*ns->cc.ucell + c*ur[dim]);
hig-flow-discret.c:                             if (fabs(ns->cc.ucell - urr[dim]) <= tol){
hig-flow-discret.c:	                         conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(a*ur[dim] - c*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(c*ur[dim] + b*ns->cc.ucell -d*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ur[dim]);
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_left(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                             if (fabs(ns->cc.ucell-ull[dim]) <= tol) {
hig-flow-discret.c:	                         conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                         fi = (ul[dim] - ull[dim])/(ns->cc.ucell-ull[dim]);
hig-flow-discret.c:	                             conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(a*ul[dim] - c*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(b*ns->cc.ucell + c*ul[dim] - d*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ul[dim]);
hig-flow-discret.c:                                 conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ur[dim])/(ul[dim] - ur[dim]);
hig-flow-discret.c:                                     conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(b*ul[dim] + c*ns->cc.ucell - d*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(c*ul[dim] + e*ns->cc.ucell);
hig-flow-discret.c:                         ns->cc.vc[dim2] = ((conv1-conv2)/fdelta[dim]); 
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] = compute_facet_du2dx2(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 if (ns->contr.flowtype == 3){
hig-flow-discret.c:                         Sl[dim2]          = compute_center_p_left(ns->ed.sdED, fcenter, fdelta, dim2, 0.5, ns->ed.ve.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                         Sr[dim2]          = compute_center_p_right(ns->ed.sdED, fcenter, fdelta, dim2, 0.5, ns->ed.ve.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                         ns->cc.dSdx[dim2] = compute_dpdx_at_point(fdelta, dim2, 0.5, Sl[dim2], Sr[dim2]);
hig-flow-discret.c:                         Sl[dim2]          = compute_center_p_left_2(ns->ed.sdED, fcenter, fdelta, dim, dim2, 1.0, ns->ed.ve.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                         Sr[dim2]          = compute_center_p_right_2(ns->ed.sdED, fcenter, fdelta, dim, dim2, 1.0, ns->ed.ve.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                         ns->cc.dSdx[dim2] = compute_dpdx_at_point(fdelta, dim2, 1.0, Sl[dim2], Sr[dim2]);
hig-flow-discret.c:    switch (ns->contr.spatialdiscrtype) {
hig-flow-discret.c:            nplus           = compute_value_at_point(ns->ed.eo.sdEOnplus, ccenter, ccenter, 1.0, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-discret.c:            nminus          = compute_value_at_point(ns->ed.eo.sdEOnminus, ccenter, ccenter, 1.0, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-discret.c:            nl              = compute_center_p_left_22(sdn, ccenter, cdelta, dim, 1.0, dpn, ns->ed.stn, &incell_l); 
hig-flow-discret.c:            nr              = compute_center_p_right_22(sdn, ccenter, cdelta, dim, 1.0, dpn, ns->ed.stn, &incell_r); 
hig-flow-discret.c:            psil            = compute_center_p_left(sdpsi, ccenter, cdelta, dim, 1.0, dppsi, ns->ed.stn);
hig-flow-discret.c:            psir            = compute_center_p_right(sdpsi, ccenter, cdelta, dim, 1.0, dppsi, ns->ed.stn);
hig-flow-discret.c:            phil            = compute_center_p_left(sdphi, ccenter, cdelta, dim, 1.0, dpphi, ns->ed.stn);
hig-flow-discret.c:            phir            = compute_center_p_right(sdphi, ccenter, cdelta, dim, 1.0, dpphi, ns->ed.stn);
hig-flow-discret.c:            ns->cc.dpsidx   = compute_dpdx_at_point(cdelta, dim, 1.0, psil, psir);
hig-flow-discret.c:            ns->cc.dphidx   = compute_dpdx_at_point(cdelta, dim, 1.0, phil, phir);
hig-flow-discret.c:         //   ns->cc.d2psidx2 = compute_facet_du2dx2(cdelta, dim, 1.0, psic, psil, psir);
hig-flow-discret.c:         //   ns->cc.d2phidx2 = compute_facet_du2dx2(cdelta, dim, 1.0, phic, phil, phir);
hig-flow-discret.c:            ns->cc.d2psidx2 = (nplus - nminus)*ns->ed.eo.par.H*ns->ed.eo.par.H*ns->ed.eo.par.ez*ns->ed.eo.par.n0/ns->ed.eo.par.eps_eo/ns->ed.eo.par.zeta0;
hig-flow-discret.c:            ns->cc.d2phidx2 = 0.0;
hig-flow-discret.c:            ns->cc.d2ndx2   = compute_facet_du2dx2(cdelta, dim, 1.0, nc, nl, nr);
hig-flow-discret.c:    switch (ns->contr.spatialdiscrtype) {
hig-flow-discret.c:            ns->cc.ncell = nc;
hig-flow-discret.c:            nl    = compute_center_p_left_22(sdn, ccenter, cdelta, dim, 1.0, dpn, ns->ed.stn, &incell_l); 
hig-flow-discret.c:            nr    = compute_center_p_right_22(sdn, ccenter, cdelta, dim, 1.0, dpn, ns->ed.stn, &incell_r); 
hig-flow-discret.c:            psil  = compute_center_p_left(sdpsi, ccenter, cdelta, dim, 1.0, dppsi, ns->ed.stn);
hig-flow-discret.c:            psir  = compute_center_p_right(sdpsi, ccenter, cdelta, dim, 1.0, dppsi, ns->ed.stn);
hig-flow-discret.c:            phil  = compute_center_p_left(sdphi, ccenter, cdelta, dim, 1.0, dpphi, ns->ed.stn);
hig-flow-discret.c:            phir  = compute_center_p_right(sdphi, ccenter, cdelta, dim, 1.0, dpphi, ns->ed.stn);
hig-flow-discret.c:            ns->cc.dpsidx   = compute_dpdx_at_point(cdelta, dim, 1.0, psil, psir);
hig-flow-discret.c:            ns->cc.dphidx   = compute_dpdx_at_point(cdelta, dim, 1.0, phil, phir);
hig-flow-discret.c:            ns->cc.dndx     = compute_dpdx_at_point(cdelta, dim, 1.0, nl, nr);
hig-flow-discret.c:            ns->cc.d2ndx2   = compute_facet_du2dx2(cdelta, dim, 1.0, nc, nl, nr);
hig-flow-discret.c:            ns->cc.d2psidx2 = compute_facet_du2dx2(cdelta, dim, 1.0, psic, psil, psir); 
hig-flow-discret.c://            ns->cc.d2phidx2 = compute_facet_du2dx2(cdelta, dim, 1.0, phic, phil, phir); 
hig-flow-discret.c://            ns->cc.d2psidx2 = ns->ed.eo.par.delta*(dp_get_value(ns->ed.eo.dpnminus, clid) - dp_get_value(ns->ed.eo.dpnplus,clid)); 
hig-flow-discret.c:            ns->cc.d2phidx2 = 0.0;
hig-flow-discret.c:    switch (ns->contr.spatialdiscrtype) {
hig-flow-discret.c:            ns->cc.convec_type = ns->contr.convecdiscrtype;
hig-flow-discret.c:            ns->cc.ucell  = dp_get_value(dpu[dim], fgid);
hig-flow-discret.c:            ns->cc.F      = compute_facet_value_at_point(ns->sfdF[dim], fcenter, fcenter, 1.0, ns->dpFU[dim], ns->stnF); 
hig-flow-discret.c:            pl            = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            pr            = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-discret.c:            ns->cc.dpdx   = compute_dpdx_at_point(fdelta, dim, 0.5, pl, pr);
hig-flow-discret.c:            //Fl            = compute_center_p_left(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            //Fr            = compute_center_p_right(ns->sdF, fcenter, fdelta, dim, 0.5, ns->dpF, ns->stnF);
hig-flow-discret.c:            //ns->cc.F     += compute_value_at_mid_point(Fl, Fr);
hig-flow-discret.c:                      ns->cc.v[dim2] = ns->cc.ucell;
hig-flow-discret.c:                      ns->cc.v[dim2] = compute_facet_u_2(sfdu[dim2], fcenter, fdelta, dim, dim2, 1.0, dpu[dim2], ns->stn);
hig-flow-discret.c:                 ul[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if ((infacet == 0) && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ns->cc.convec_type = 1;
hig-flow-discret.c:                 ur[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);         
hig-flow-discret.c:                 if ((infacet == 0) && (ns->cc.convec_type == 2)) {
hig-flow-discret.c:                      ns->cc.convec_type = 1;
hig-flow-discret.c:                 ns->cc.dudxc[dim2]  = compute_facet_dudxc(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 ns->cc.dudxl[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                 urr[dim2]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 ull[dim2]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                 if (ns->cc.convec_type == 2) {
hig-flow-discret.c:                     if (ns->contr.secondconvecdiscrtype == 2) {
hig-flow-discret.c:                         ns->cc.dudxrr[dim2]  = compute_facet_dudxr(fdelta, dim2, 1.0, ur[dim2], ns->cc.ucell, urr[dim2]);
hig-flow-discret.c:                         ns->cc.dudxll[dim2]  = compute_facet_dudxl(fdelta, dim2, 1.0, ul[dim2], ull[dim2], ns->cc.ucell);
hig-flow-discret.c:                     }else if (ns->contr.secondconvecdiscrtype == 1){
hig-flow-discret.c:                         ul[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         ull[dim]  = compute_facet_u_left(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_ll);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ur[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 1.0, dpu[dim], ns->stn, &infacet);
hig-flow-discret.c:                         urr[dim]  = compute_facet_u_right(sfdu[dim], fcenter, fdelta, dim2, 2.0, dpu[dim], ns->stn, &infacet_rr);
hig-flow-discret.c:                             ns->cc.convec_type = 1;
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_right(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                                 conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + b*ur[dim] -d*ul[dim]);
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(e*ns->cc.ucell + c*ur[dim]);
hig-flow-discret.c:                             if (fabs(ns->cc.ucell - urr[dim]) <= tol){
hig-flow-discret.c:	                         conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ul[dim])/(ur[dim] - ul[dim]);
hig-flow-discret.c:                                     conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(a*ur[dim] - c*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         if(infacet_rr == 1)  conv1 = ns->cc.vc[dim2]*(c*ur[dim] + b*ns->cc.ucell -d*urr[dim]);
hig-flow-discret.c:                                         else                 conv1 = ns->cc.vc[dim2]*ur[dim];
hig-flow-discret.c:                                         conv1 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ur[dim]);
hig-flow-discret.c:                         ns->cc.vc[dim2]  = compute_facet_u_left(sfdu[dim2], fcenter, fdelta, dim2, 0.5, dpu[dim2], ns->stn, &infacet);
hig-flow-discret.c:                         if (ns->cc.vc[dim2] > 0.0){
hig-flow-discret.c:                             if (fabs(ns->cc.ucell-ull[dim]) <= tol) {
hig-flow-discret.c:	                         conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                         fi = (ul[dim] - ull[dim])/(ns->cc.ucell-ull[dim]);
hig-flow-discret.c:	                             conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(a*ul[dim] - c*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 if (infacet_ll == 1)  conv2 = ns->cc.vc[dim2]*(b*ns->cc.ucell + c*ul[dim] - d*ull[dim]);
hig-flow-discret.c:                                         else                  conv2 = ns->cc.vc[dim2]*ul[dim];
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(c*ns->cc.ucell + e*ul[dim]);
hig-flow-discret.c:                                 conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:                                 fi = (ns->cc.ucell - ur[dim])/(ul[dim] - ur[dim]);
hig-flow-discret.c:                                     conv2 = ns->cc.vc[dim2]*ns->cc.ucell;
hig-flow-discret.c:	                                 conv2 = ns->cc.vc[dim2]*(a*ns->cc.ucell - c*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(b*ul[dim] + c*ns->cc.ucell - d*ur[dim]);
hig-flow-discret.c:                                         conv2 = ns->cc.vc[dim2]*(c*ul[dim] + e*ns->cc.ucell);
hig-flow-discret.c:                         ns->cc.vc[dim2] = ((conv1-conv2)/fdelta[dim]); 
hig-flow-discret.c:                 ns->cc.du2dx2[dim2] = compute_facet_du2dx2(fdelta, dim2, 1.0, ns->cc.ucell, ul[dim2], ur[dim2]);
hig-flow-discret.c:                     Sl[dim2]          = compute_center_p_left(ns->ed.sdED, fcenter, fdelta, dim2, 0.5, ns->ed.im.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                     Sr[dim2]          = compute_center_p_right(ns->ed.sdED, fcenter, fdelta, dim2, 0.5, ns->ed.im.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                     ns->cc.dSdx[dim2] = compute_dpdx_at_point(fdelta, dim2, 0.5, Sl[dim2], Sr[dim2]);
hig-flow-discret.c:                     Sl[dim2]          = compute_center_p_left_2(ns->ed.sdED, fcenter, fdelta, dim, dim2, 1.0, ns->ed.im.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                     Sr[dim2]          = compute_center_p_right_2(ns->ed.sdED, fcenter, fdelta, dim, dim2, 1.0, ns->ed.im.dpS[dim][dim2], ns->ed.stn);
hig-flow-discret.c:                     ns->cc.dSdx[dim2] = compute_dpdx_at_point(fdelta, dim2, 1.0, Sl[dim2], Sr[dim2]);
hig-flow-ic.c:    sprintf(namefile,"%s.domain",ns->par.nameload);
hig-flow-ic.c:    if (ns->contr.flowtype == 1) {
hig-flow-ic.c:    } else if (ns->contr.flowtype == 2) {
hig-flow-ic.c:    } else if (ns->contr.flowtype == 3) {
hig-flow-ic.c:    }else if (ns->contr.flowtype == 4) {
hig-flow-ic.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-ic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-ic.c:        real val = ns->func.get_pressure(center, ns->par.t);
hig-flow-ic.c:        dp_set_value(ns->dpp, cgid, val);
hig-flow-ic.c:    dp_sync(ns->dpp);
hig-flow-ic.c:    sim_domain *sdvisc = psd_get_local_domain(ns->ed.psdED);
hig-flow-ic.c:        real val = ns->ed.visc.get_viscosity(center, 0.0, ns->par.t);
hig-flow-ic.c:        dp_set_value(ns->ed.visc.dpvisc, cgid, val);
hig-flow-ic.c:    dp_sync(ns->ed.visc.dpvisc);
hig-flow-ic.c:    sim_domain *sddens = psd_get_local_domain(ns->ed.psdED);
hig-flow-ic.c:        real val = ns->ed.dens.get_density(center, ns->par.t);
hig-flow-ic.c:        dp_set_value(ns->ed.dens.dpdens, cgid, val);
hig-flow-ic.c:    dp_sync(ns->ed.dens.dpdens);
hig-flow-ic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdF);
hig-flow-ic.c:        real val = ns->func.get_source_term(center, ns->par.t);
hig-flow-ic.c:        dp_set_value(ns->dpF, cgid, val);
hig-flow-ic.c:    dp_sync(ns->dpF);
hig-flow-ic.c:    if (ns->contr.flowtype == 3) {
hig-flow-ic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-ic.c:                    real val = ns->ed.ve.get_tensor(center, i, j, ns->par.t);
hig-flow-ic.c:                    dp_set_value(ns->ed.ve.dpS[i][j], cgid, val);
hig-flow-ic.c:                dp_sync(ns->ed.ve.dpS[i][j]);
hig-flow-ic.c:    if (ns->contr.flowtype == 4) {
hig-flow-ic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-ic.c:                    real val = ns->ed.im.get_tensor(center, i, j, ns->par.t);
hig-flow-ic.c:                    dp_set_value(ns->ed.im.dpS[i][j], cgid, val);
hig-flow-ic.c:                dp_sync(ns->ed.im.dpS[i][j]);
hig-flow-ic.c:    if (ns->contr.flowtype == 4) {
hig-flow-ic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-ic.c:                        dp_set_value(ns->ed.im.dpB[k][i][j], cgid, val);
hig-flow-ic.c:                    dp_sync(ns->ed.im.dpB[k][i][j]);
hig-flow-ic.c:        sfdFeo[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-ic.c:            real val = ns->ed.eo.get_electroosmotic_source_term(center, dim, ns->par.t);
hig-flow-ic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], fgid, val);
hig-flow-ic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-ic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-ic.c:        real val = ns->ed.eo.get_electroosmotic_phi(center, ns->par.t);
hig-flow-ic.c:        dp_set_value(ns->ed.eo.dpphi, cgid, val);
hig-flow-ic.c:    dp_sync(ns->ed.eo.dpphi);
hig-flow-ic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-ic.c:        real val = ns->ed.eo.get_electroosmotic_psi(center, ns->par.t);
hig-flow-ic.c:        dp_set_value(ns->ed.eo.dppsi, cgid, val);
hig-flow-ic.c:    dp_sync(ns->ed.eo.dppsi);
hig-flow-ic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOnplus);
hig-flow-ic.c:        real val = ns->ed.eo.get_electroosmotic_nplus(center, ns->par.t);
hig-flow-ic.c:        dp_set_value(ns->ed.eo.dpnplus, cgid, val);
hig-flow-ic.c:    dp_sync(ns->ed.eo.dpnplus);
hig-flow-ic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-ic.c:        real val = ns->ed.eo.get_electroosmotic_nminus(center, ns->par.t);
hig-flow-ic.c:        dp_set_value(ns->ed.eo.dpnminus, cgid, val);
hig-flow-ic.c:    dp_sync(ns->ed.eo.dpnminus);
hig-flow-ic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-ic.c:            real val = ns->func.get_velocity(center, dim, ns->par.t);
hig-flow-ic.c:            dp_set_value(ns->dpu[dim], fgid, val);
hig-flow-ic.c:        dp_sync(ns->dpu[dim]);
hig-flow-ic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdF[dim]);
hig-flow-ic.c:            real val = ns->func.get_facet_source_term(center, dim, ns->par.t);
hig-flow-ic.c:            dp_set_value(ns->dpFU[dim], fgid, val);
hig-flow-ic.c:        dp_sync(ns->dpFU[dim]);
hig-flow-ic.c:    if (ns->contr.flowtype == 2) {
hig-flow-ic.c:    } else if (ns->contr.flowtype == 3) {
hig-flow-ic.c:    }else if (ns->contr.flowtype == 4) {
hig-flow-ic.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-io.c:    if (ns->contr.modelflowtype == 1){
hig-flow-io.c:        real deltaeo  = ns->ed.eo.par.delta;
hig-flow-io.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-io.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-io.c:        sim_domain *sdnplus  = psd_get_local_domain(ns->ed.eo.psdEOnplus);
hig-flow-io.c:        sim_domain *sdnminus = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-io.c:            phi  = compute_value_at_point(ns->ed.eo.sdEOphi, ccenter, ccenter, 1.0, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-io.c:            psi  = compute_value_at_point(ns->ed.eo.sdEOpsi, ccenter, ccenter, 1.0, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-io.c:            np   = compute_value_at_point(ns->ed.eo.sdEOnplus, ccenter, ccenter, 1.0, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-io.c:            nm   = compute_value_at_point(ns->ed.eo.sdEOnminus, ccenter, ccenter, 1.0, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-io.c:    if (ns->contr.flowtype == 3) {
hig-flow-io.c:        real Re   = ns->par.Re;
hig-flow-io.c:        real De   = ns->ed.ve.par.De;
hig-flow-io.c:        real beta = ns->ed.ve.par.beta;
hig-flow-io.c:        real tol  = ns->ed.ve.par.kernel_tol;
hig-flow-io.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-io.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-io.c:                    S[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-io.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-io.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-io.c:            real u = dp_get_value(ns->dpu[dim], flid);
hig-flow-io.c:            switch (ns->contr.flowtype) {
hig-flow-io.c:    snprintf(vtkname, sizeof vtkname, "%s_%d-%d.vtk", ns->par.nameprint, rank, ns->par.frame);
hig-flow-io.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-io.c:            sfdu2[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-io.c:            real value0 = compute_facet_value_at_point(sfdu2[dim], ccenter, p0, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value1 = compute_facet_value_at_point(sfdu2[dim], ccenter, p1, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value2 = compute_facet_value_at_point(sfdu2[dim], ccenter, p2, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value3 = compute_facet_value_at_point(sfdu2[dim], ccenter, p3, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:        //real val = dp_get_value(ns->dpp, cgid);
hig-flow-io.c:        real value0 = compute_facet_value_at_point(sfdu2[0], ccenter, p0, 1.0, ns->dpu[0], ns->stn);
hig-flow-io.c:        real value1 = compute_facet_value_at_point(sfdu2[0], ccenter, p1, 1.0, ns->dpu[0], ns->stn);
hig-flow-io.c:    sfdu2[0] = psfd_get_local_domain(ns->psfdu[0]);
hig-flow-io.c:        real value0 = compute_facet_value_at_point(sfdu2[0], ccenter, p0, 1.0, ns->dpu[0], ns->stn);
hig-flow-io.c:        real value1 = compute_facet_value_at_point(sfdu2[0], ccenter, p1, 1.0, ns->dpu[0], ns->stn);
hig-flow-io.c:    snprintf(vtkname, sizeof vtkname, "%s_%d-%d.vtk", ns->par.nameprint, rank, ns->par.frame);
hig-flow-io.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-io.c:            sfdu2[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-io.c:            real value0 = compute_facet_value_at_point(sfdu2[dim], ccenter, p0, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value1 = compute_facet_value_at_point(sfdu2[dim], ccenter, p1, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value2 = compute_facet_value_at_point(sfdu2[dim], ccenter, p2, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value3 = compute_facet_value_at_point(sfdu2[dim], ccenter, p3, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value4 = compute_facet_value_at_point(sfdu2[dim], ccenter, p4, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value5 = compute_facet_value_at_point(sfdu2[dim], ccenter, p5, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value6 = compute_facet_value_at_point(sfdu2[dim], ccenter, p6, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value7 = compute_facet_value_at_point(sfdu2[dim], ccenter, p7, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:        real val = dp_get_value(ns->dpp, cgid);
hig-flow-io.c:    snprintf(vtkname, sizeof vtkname, "%s_%d-%d.vtk", ns->par.nameprint, rank, ns->par.frame);
hig-flow-io.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-io.c:            sfdu2[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-io.c:            real value0 = compute_facet_value_at_point(sfdu2[dim], ccenter, p0, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value1 = compute_facet_value_at_point(sfdu2[dim], ccenter, p1, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value2 = compute_facet_value_at_point(sfdu2[dim], ccenter, p2, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value3 = compute_facet_value_at_point(sfdu2[dim], ccenter, p3, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value4 = compute_facet_value_at_point(sfdu2[dim], ccenter, p4, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value5 = compute_facet_value_at_point(sfdu2[dim], ccenter, p5, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value6 = compute_facet_value_at_point(sfdu2[dim], ccenter, p6, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:            real value7 = compute_facet_value_at_point(sfdu2[dim], ccenter, p7, 1.0, ns->dpu[dim], ns->stn);
hig-flow-io.c:        real val = dp_get_value(ns->dpp, cgid);
hig-flow-io.c:    for(it = sd_get_domain_celliterator(ns->ed.sdED); !higcit_isfinished(it); higcit_nextcell(it)) {
hig-flow-io.c:        real val = dp_get_value(ns->ed.ve.dpS[0][0], cgid);
hig-flow-io.c:    ns->par.nameload = argv[1]; argv++;
hig-flow-io.c:    ns->par.namesave = argv[1]; argv++;
hig-flow-io.c:    ns->par.nameprint = argv[1]; argv++;
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.contr",ns->par.nameload);
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->contr.projtype));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->contr.flowtype));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->contr.modelflowtype));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->contr.tempdiscrtype));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->contr.spatialdiscrtype));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->contr.convecdiscrtype));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->contr.secondconvecdiscrtype));
hig-flow-io.c:		switch (ns->contr.projtype) {
hig-flow-io.c:		switch (ns->contr.flowtype) {
hig-flow-io.c:		switch (ns->contr.modelflowtype) {
hig-flow-io.c:		switch (ns->contr.tempdiscrtype) {
hig-flow-io.c:		switch (ns->contr.spatialdiscrtype) {
hig-flow-io.c:		switch (ns->contr.convecdiscrtype) {
hig-flow-io.c:			switch (ns->contr.secondconvecdiscrtype) {
hig-flow-io.c:        snprintf(namefile, sizeof namefile, "%s.contr",ns->par.namesave);
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->contr.projtype));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->contr.flowtype));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->contr.modelflowtype));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->contr.tempdiscrtype));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->contr.spatialdiscrtype));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->contr.convecdiscrtype));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->contr.secondconvecdiscrtype));
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.par",ns->par.nameload);
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->par.step));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->par.finalstep));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->par.t));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->par.dt));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->par.Re));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->par.dts));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->par.dtp));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->par.frame));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->par.ts));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->par.tp));
hig-flow-io.c:       	    printf("=+=+=+= Reynolds Number: %f =+=+=+=\n",ns->par.Re);
hig-flow-io.c:        snprintf(namefile, sizeof namefile, "%s.par",ns->par.namesave);
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->par.step));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->par.finalstep));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->par.t));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->par.dt));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->par.Re));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->par.dts));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->par.dtp));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->par.frame));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->par.ts));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->par.tp));
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.vel",ns->par.nameload);
hig-flow-io.c:        loadUV(ns->psfdu, ns->dpu, fd);
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.pres",ns->par.nameload);
hig-flow-io.c:        load_property_cell(ns->psdp, ns->dpp, fd);
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.vel",ns->par.namesave);
hig-flow-io.c:        saveUV(ns->psfdu, ns->dpu, fd, myrank, ntasks);
hig-flow-io.c:        printf("=+=+=+= Error saving file %s =+=+=+=\n",ns->par.namesave);
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.pres",ns->par.namesave);
hig-flow-io.c:        save_property_cell(ns->psdp, ns->dpp, fd, myrank, ntasks);
hig-flow-io.c:        printf("=+=+=+= Error saving file %s =+=+=+=\n",ns->par.namesave);
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.viscpar",ns->par.nameload);
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.ve.par.De));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.ve.par.beta));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.ve.par.epsilon));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.ve.par.psi));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.ve.par.alpha));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.ve.par.kernel_tol));
hig-flow-io.c:	    printf("=+=+=+= Deborah Number: %f =+=+=+=\n",ns->ed.ve.par.De);
hig-flow-io.c:	    printf("=+=+=+= Beta: %f =+=+=+=\n",ns->ed.ve.par.beta);
hig-flow-io.c:        snprintf(namefile, sizeof namefile, "%s.viscpar",ns->par.namesave);
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.ve.par.De));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.ve.par.beta));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.ve.par.epsilon));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.ve.par.psi));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.ve.par.alpha));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.ve.par.kernel_tol));
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.visccontr",ns->par.nameload);
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.ve.contr.model));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.ve.contr.discrtype));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.ve.contr.convecdiscrtype));
hig-flow-io.c:	    switch (ns->ed.ve.contr.model) {
hig-flow-io.c:	    switch (ns->ed.ve.contr.discrtype) {
hig-flow-io.c:	    switch (ns->ed.ve.contr.convecdiscrtype) {
hig-flow-io.c:        snprintf(namefile, sizeof namefile, "%s.visccontr",ns->par.namesave);
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->ed.ve.contr.model));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->ed.ve.contr.discrtype));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->ed.ve.contr.convecdiscrtype));
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.eopar",ns->par.nameload);
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.eo.par.alpha));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.eo.par.delta));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.eo.par.Pe));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.eo.par.dphidx));
hig-flow-io.c:	    printf("=+=+=+= alpha: %e =+=+=+=\n",ns->ed.eo.par.alpha);
hig-flow-io.c:	    printf("=+=+=+= delta: %e =+=+=+=\n",ns->ed.eo.par.delta);
hig-flow-io.c:	    printf("=+=+=+= Peclet number: %f =+=+=+=\n",ns->ed.eo.par.Pe);
hig-flow-io.c:	    printf("=+=+=+= Externel field dphidx : %e =+=+=+=\n",ns->ed.eo.par.dphidx);
hig-flow-io.c:        snprintf(namefile, sizeof namefile, "%s.viscpar",ns->par.namesave);
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.eo.par.alpha));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.eo.par.delta));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.eo.par.Pe));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.eo.par.dphidx));
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.eocontr",ns->par.nameload);
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.eo.contr.eo_model));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.eo.contr.convecdiscrtype));
hig-flow-io.c:	    switch (ns->ed.eo.contr.eo_model) {
hig-flow-io.c:	      switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-io.c:        snprintf(namefile, sizeof namefile, "%s.eocontr",ns->par.namesave);
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->ed.eo.contr.eo_model));
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.viscintpar",ns->par.nameload);
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.De));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.im.par.M));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.alpha));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.beta));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.a[0]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.a[1]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.a[2]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.a[3]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.a[4]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.a[5]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.a[6]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.a[7]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.lambda[0]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.lambda[1]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.lambda[2]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.lambda[3]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.lambda[4]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.lambda[5]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.lambda[6]));
hig-flow-io.c:        ifd = fscanf(fd,"%lf",&(ns->ed.im.par.lambda[7]));
hig-flow-io.c:	    printf("=+=+=+= Deborah Number: %f =+=+=+=\n",ns->ed.im.par.De);
hig-flow-io.c:	    printf("=+=+=+= Alpha: %f =+=+=+=\n",ns->ed.im.par.alpha);
hig-flow-io.c:	    printf("=+=+=+= Beta: %f =+=+=+=\n",ns->ed.im.par.beta);
hig-flow-io.c:	        printf("=+=+=+= a(%d): %f =+=+=+=\n",i,ns->ed.im.par.a[i]);
hig-flow-io.c:	        printf("=+=+=+= Lambda(%d): %f =+=+=+=\n",i,ns->ed.im.par.lambda[i]);
hig-flow-io.c:        snprintf(namefile, sizeof namefile, "%s.viscintpar",ns->par.namesave);
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.im.par.De));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->ed.im.par.M));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.im.par.alpha));
hig-flow-io.c:            fprintf(fd,"%lf\n",(ns->ed.im.par.beta));
hig-flow-io.c:                fprintf(fd,"%lf\n",(ns->ed.im.par.a[k]));
hig-flow-io.c:                fprintf(fd,"%lf\n",(ns->ed.im.par.lambda[k]));
hig-flow-io.c:    snprintf(namefile, sizeof namefile, "%s.viscintcontr",ns->par.nameload);
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.im.contr.model));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.im.contr.discrtype));
hig-flow-io.c:        ifd = fscanf(fd,"%d",&(ns->ed.im.contr.convecdiscrtype));
hig-flow-io.c:	    switch (ns->ed.im.contr.model) {
hig-flow-io.c:	    switch (ns->ed.im.contr.discrtype) {
hig-flow-io.c:	    switch (ns->ed.im.contr.convecdiscrtype) {
hig-flow-io.c:        snprintf(namefile, sizeof namefile, "%s.viscintcontr",ns->par.namesave);
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->ed.im.contr.model));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->ed.im.contr.discrtype));
hig-flow-io.c:            fprintf(fd,"%d\n",(ns->ed.im.contr.convecdiscrtype));
hig-flow-kernel.c:    dp_destroy(ns->dpp);
hig-flow-kernel.c:    dp_destroy(ns->ddeltap);
hig-flow-kernel.c:        dp_destroy(ns->dpu[dim]);
hig-flow-kernel.c:        dp_destroy(ns->dpustar[dim]);
hig-flow-kernel.c:        dp_destroy(ns->dpuaux[dim]);
hig-flow-kernel.c:        dp_destroy(ns->dpFU[dim]);
hig-flow-kernel.c:    dp_destroy(ns->dpF);
hig-flow-kernel.c:    switch (ns->contr.flowtype) {
hig-flow-kernel.c:            dp_destroy(ns->ed.visc.dpvisc);
hig-flow-kernel.c:                    dp_destroy(ns->ed.gn.dpD[i][j]);
hig-flow-kernel.c:            stn_destroy(ns->ed.stn);
hig-flow-kernel.c:            dp_destroy(ns->ed.visc.dpvisc);
hig-flow-kernel.c:            dp_destroy(ns->ed.dens.dpdens);
hig-flow-kernel.c:            stn_destroy(ns->ed.stn);
hig-flow-kernel.c:                    dp_destroy(ns->ed.ve.dpD[i][j]);
hig-flow-kernel.c:                    dp_destroy(ns->ed.ve.dpS[i][j]);
hig-flow-kernel.c:                    dp_destroy(ns->ed.ve.dpKernel[i][j]);
hig-flow-kernel.c:            stn_destroy(ns->ed.stn);
hig-flow-kernel.c:                   dp_destroy(ns->ed.im.dpD[i][j]);
hig-flow-kernel.c:                   dp_destroy(ns->ed.im.dpS[i][j]);
hig-flow-kernel.c:                       dp_destroy(ns->ed.im.dpB[k][i][j]);
hig-flow-kernel.c:           stn_destroy(ns->ed.stn);
hig-flow-kernel.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-kernel.c:            dp_destroy(ns->ed.eo.dpFeo[dim]);
hig-flow-kernel.c:        dp_destroy(ns->ed.eo.dpphi);
hig-flow-kernel.c:        dp_destroy(ns->ed.eo.dppsi);
hig-flow-kernel.c:        dp_destroy(ns->ed.eo.dpnplus);
hig-flow-kernel.c:        dp_destroy(ns->ed.eo.dpnminus);
hig-flow-kernel.c:        stn_destroy(ns->ed.stn);
hig-flow-kernel.c:        slv_destroy(ns->ed.eo.slvpsi);
hig-flow-kernel.c:        slv_destroy(ns->ed.eo.slvphi);
hig-flow-kernel.c:        slv_destroy(ns->ed.eo.slvnplus);
hig-flow-kernel.c:        slv_destroy(ns->ed.eo.slvnminus);
hig-flow-kernel.c:    stn_destroy(ns->stn);
hig-flow-kernel.c:    stn_destroy(ns->stnF);
hig-flow-kernel.c:    slv_destroy(ns->slvp);
hig-flow-kernel.c:    if (ns->contr.tempdiscrtype >= 3) {
hig-flow-kernel.c:            slv_destroy(ns->slvu[i]);
hig-flow-kernel.c:    int localdomainsize = psd_get_local_domain_size(ns->psdp);
hig-flow-kernel.c:    ns->slvp            = slv_create(SOLVER_ANY, psd_get_first_id(ns->psdp), localdomainsize);
hig-flow-kernel.c:    slv_set_maxnonzeros(ns->slvp, 800);
hig-flow-kernel.c:    if (ns->contr.tempdiscrtype >= 3) {
hig-flow-kernel.c:            localdomainsize = psfd_get_local_domain_size(ns->psfdu[dim]);
hig-flow-kernel.c:            ns->slvu[dim]   = slv_create(SOLVER_ANY, psfd_get_first_id(ns->psfdu[dim]), localdomainsize);
hig-flow-kernel.c:            slv_set_maxnonzeros(ns->slvu[dim], 800);
hig-flow-kernel.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-kernel.c:        int localdomainsizepsi = psd_get_local_domain_size(ns->ed.eo.psdEOpsi);
hig-flow-kernel.c:        ns->ed.eo.slvpsi            = slv_create(SOLVER_ANY, psd_get_first_id(ns->ed.eo.psdEOpsi), localdomainsizepsi);
hig-flow-kernel.c:        slv_set_maxnonzeros(ns->ed.eo.slvpsi, 800);
hig-flow-kernel.c:        int localdomainsizephi = psd_get_local_domain_size(ns->ed.eo.psdEOphi);
hig-flow-kernel.c:        ns->ed.eo.slvphi            = slv_create(SOLVER_ANY, psd_get_first_id(ns->ed.eo.psdEOphi), localdomainsizephi);
hig-flow-kernel.c:        slv_set_maxnonzeros(ns->ed.eo.slvphi, 800);
hig-flow-kernel.c:        int localdomainsizenplus = psd_get_local_domain_size(ns->ed.eo.psdEOnplus);
hig-flow-kernel.c:        ns->ed.eo.slvnplus            = slv_create(SOLVER_ANY, psd_get_first_id(ns->ed.eo.psdEOnplus), localdomainsizenplus);
hig-flow-kernel.c:        slv_set_maxnonzeros(ns->ed.eo.slvnplus, 800);
hig-flow-kernel.c:        int localdomainsizenminus = psd_get_local_domain_size(ns->ed.eo.psdEOnminus);
hig-flow-kernel.c:        ns->ed.eo.slvnminus            = slv_create(SOLVER_ANY, psd_get_first_id(ns->ed.eo.psdEOnminus), localdomainsizenminus);
hig-flow-kernel.c:        slv_set_maxnonzeros(ns->ed.eo.slvnminus, 800);
hig-flow-kernel.c:    slv_destroy(ns->slvp);
hig-flow-kernel.c:    int localdomainsize = psd_get_local_domain_size(ns->psdp);
hig-flow-kernel.c:    ns->slvp            = slv_create(SOLVER_ANY, psd_get_first_id(ns->psdp), localdomainsize);
hig-flow-kernel.c:    slv_set_maxnonzeros(ns->slvp, 800);
hig-flow-kernel.c:    if (ns->contr.tempdiscrtype >= 3) {
hig-flow-kernel.c:            slv_destroy(ns->slvu[dim]);
hig-flow-kernel.c:            localdomainsize = psfd_get_local_domain_size(ns->psfdu[dim]);
hig-flow-kernel.c:            ns->slvu[dim]   = slv_create(SOLVER_ANY, psfd_get_first_id(ns->psfdu[dim]), localdomainsize);
hig-flow-kernel.c:            slv_set_maxnonzeros(ns->slvu[dim], 800);
hig-flow-kernel.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-kernel.c:        slv_destroy(ns->ed.eo.slvpsi);
hig-flow-kernel.c:        int localdomainsizepsi = psd_get_local_domain_size(ns->ed.eo.psdEOpsi);
hig-flow-kernel.c:        ns->ed.eo.slvpsi            = slv_create(SOLVER_ANY, psd_get_first_id(ns->ed.eo.psdEOpsi), localdomainsizepsi);
hig-flow-kernel.c:        slv_set_maxnonzeros(ns->ed.eo.slvpsi, 800);
hig-flow-kernel.c:        slv_destroy(ns->ed.eo.slvphi);
hig-flow-kernel.c:        int localdomainsizephi = psd_get_local_domain_size(ns->ed.eo.psdEOphi);
hig-flow-kernel.c:        ns->ed.eo.slvphi            = slv_create(SOLVER_ANY, psd_get_first_id(ns->ed.eo.psdEOpsi), localdomainsizephi);
hig-flow-kernel.c:        slv_set_maxnonzeros(ns->ed.eo.slvphi, 800);
hig-flow-kernel.c:        slv_destroy(ns->ed.eo.slvnplus);
hig-flow-kernel.c:        int localdomainsizenplus = psd_get_local_domain_size(ns->ed.eo.psdEOnplus);
hig-flow-kernel.c:        ns->ed.eo.slvnplus            = slv_create(SOLVER_ANY, psd_get_first_id(ns->ed.eo.psdEOnplus), localdomainsizenplus);
hig-flow-kernel.c:        slv_set_maxnonzeros(ns->ed.eo.slvnplus, 800);
hig-flow-kernel.c:        slv_destroy(ns->ed.eo.slvnminus);
hig-flow-kernel.c:        int localdomainsizenminus = psd_get_local_domain_size(ns->ed.eo.psdEOnminus);
hig-flow-kernel.c:        ns->ed.eo.slvnminus            = slv_create(SOLVER_ANY, psd_get_first_id(ns->ed.eo.psdEOnminus), localdomainsizenminus);
hig-flow-kernel.c:        slv_set_maxnonzeros(ns->ed.eo.slvnminus, 800);
hig-flow-kernel.c:    ns->sdp = sd_create(NULL);
hig-flow-kernel.c:    sd_use_cache(ns->sdp, cache);      
hig-flow-kernel.c:    sd_set_interpolator_order(ns->sdp, order);
hig-flow-kernel.c:    ns->sdF = sd_create(NULL);
hig-flow-kernel.c:    sd_use_cache(ns->sdF, cache);      
hig-flow-kernel.c:    sd_set_interpolator_order(ns->sdF, order);
hig-flow-kernel.c:    if (ns->contr.flowtype == 1) {
hig-flow-kernel.c:       ns->ed.sdED = sd_create(NULL);
hig-flow-kernel.c:       sd_use_cache(ns->ed.sdED, cache);      
hig-flow-kernel.c:       sd_set_interpolator_order(ns->ed.sdED, order);
hig-flow-kernel.c:       ns->ed.visc.get_viscosity = get_viscosity;
hig-flow-kernel.c:    if (ns->contr.flowtype == 2) {
hig-flow-kernel.c:       ns->ed.sdED = sd_create(NULL);
hig-flow-kernel.c:       sd_use_cache(ns->ed.sdED, cache);      
hig-flow-kernel.c:       sd_set_interpolator_order(ns->ed.sdED, order);
hig-flow-kernel.c:       ns->ed.visc.get_viscosity = get_viscosity;
hig-flow-kernel.c:       ns->ed.dens.get_density   = get_density;
hig-flow-kernel.c:    if (ns->contr.flowtype == 3) {
hig-flow-kernel.c:       ns->ed.sdED = sd_create(NULL);
hig-flow-kernel.c:       sd_use_cache(ns->ed.sdED, cache);      
hig-flow-kernel.c:       sd_set_interpolator_order(ns->ed.sdED, order);
hig-flow-kernel.c:       ns->ed.ve.get_tensor          = get_tensor;
hig-flow-kernel.c:       ns->ed.ve.get_boundary_tensor = get_boundary_tensor;
hig-flow-kernel.c:       ns->ed.ve.get_kernel          = get_kernel;
hig-flow-kernel.c:       ns->ed.ve.get_kernel_inverse  = get_kernel_inverse;
hig-flow-kernel.c:       ns->ed.ve.get_kernel_jacobian = get_kernel_jacobian;
hig-flow-kernel.c:    if (ns->contr.flowtype == 3) {
hig-flow-kernel.c:       ns->ed.ve.calculate_m_user = calculate_m_user;
hig-flow-kernel.c:   if (ns->contr.flowtype == 4) {
hig-flow-kernel.c:       ns->ed.sdED = sd_create(NULL);
hig-flow-kernel.c:       sd_use_cache(ns->ed.sdED, cache);      
hig-flow-kernel.c:       sd_set_interpolator_order(ns->ed.sdED, order);
hig-flow-kernel.c:       ns->ed.im.get_tensor          = get_tensor;
hig-flow-kernel.c:       ns->ed.im.get_boundary_tensor = get_boundary_tensor;
hig-flow-kernel.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-kernel.c:       ns->ed.eo.sdEOphi = sd_create(NULL);
hig-flow-kernel.c:       sd_use_cache(ns->ed.eo.sdEOphi, cache);      
hig-flow-kernel.c:       sd_set_interpolator_order(ns->ed.eo.sdEOphi, order);
hig-flow-kernel.c:       ns->ed.eo.sdEOpsi = sd_create(NULL);
hig-flow-kernel.c:       sd_use_cache(ns->ed.eo.sdEOpsi, cache);      
hig-flow-kernel.c:       sd_set_interpolator_order(ns->ed.eo.sdEOpsi, order);
hig-flow-kernel.c:       ns->ed.eo.sdEOnplus = sd_create(NULL);
hig-flow-kernel.c:       sd_use_cache(ns->ed.eo.sdEOnplus, cache);      
hig-flow-kernel.c:       sd_set_interpolator_order(ns->ed.eo.sdEOnplus, order);
hig-flow-kernel.c:       ns->ed.eo.sdEOnminus = sd_create(NULL);
hig-flow-kernel.c:       sd_use_cache(ns->ed.eo.sdEOnminus, cache);      
hig-flow-kernel.c:       sd_set_interpolator_order(ns->ed.eo.sdEOnminus, order);
hig-flow-kernel.c:       ns->ed.eo.get_electroosmotic_source_term = get_electroosmotic_source_term;
hig-flow-kernel.c:       ns->ed.eo.get_electroosmotic_phi         = get_electroosmotic_phi;
hig-flow-kernel.c:       ns->ed.eo.get_electroosmotic_psi         = get_electroosmotic_psi ;
hig-flow-kernel.c:       ns->ed.eo.get_electroosmotic_nplus       = get_electroosmotic_nplus;
hig-flow-kernel.c:       ns->ed.eo.get_electroosmotic_nminus      = get_electroosmotic_nminus;
hig-flow-kernel.c:       ns->ed.eo.get_boundary_electroosmotic_source_term = get_boundary_electroosmotic_source_term;
hig-flow-kernel.c:       ns->ed.eo.get_boundary_electroosmotic_phi         = get_boundary_electroosmotic_phi;
hig-flow-kernel.c:       ns->ed.eo.get_boundary_electroosmotic_psi         = get_boundary_electroosmotic_psi ;
hig-flow-kernel.c:       ns->ed.eo.get_boundary_electroosmotic_nplus       = get_boundary_electroosmotic_nplus;
hig-flow-kernel.c:       ns->ed.eo.get_boundary_electroosmotic_nminus      = get_boundary_electroosmotic_nminus;
hig-flow-kernel.c:    ns->psdp = psd_create(ns->sdp, pg);
hig-flow-kernel.c:    psd_synced_mapper(ns->psdp);
hig-flow-kernel.c:    ns->psdF = psd_create(ns->sdF, pg);
hig-flow-kernel.c:    psd_synced_mapper(ns->psdF);
hig-flow-kernel.c:        ns->sfdu[dim] = sfd_create(NULL, dim);
hig-flow-kernel.c:        sfd_set_interpolator_order(ns->sfdu[dim], order);   
hig-flow-kernel.c:        sfd_copy_higtrees_from_center_domain(ns->sfdu[dim], ns->sdp);
hig-flow-kernel.c:        sfd_adjust_facet_ids(ns->sfdu[dim]);
hig-flow-kernel.c:        ns->psfdu[dim] = psfd_create(ns->sfdu[dim], ns->psdp);
hig-flow-kernel.c:        ns->sfdF[dim] = sfd_create(NULL, dim);
hig-flow-kernel.c:        sfd_set_interpolator_order(ns->sfdF[dim], order);   
hig-flow-kernel.c:        sfd_copy_higtrees_from_center_domain(ns->sfdF[dim], ns->sdp);
hig-flow-kernel.c:        sfd_adjust_facet_ids(ns->sfdF[dim]);
hig-flow-kernel.c:        ns->psfdF[dim] = psfd_create(ns->sfdF[dim], ns->psdp);
hig-flow-kernel.c:        psfd_compute_sfbi(ns->psfdF[dim]);
hig-flow-kernel.c:        psfd_synced_mapper(ns->psfdF[dim]);
hig-flow-kernel.c:    if (ns->contr.flowtype == 1) {
hig-flow-kernel.c:        ns->ed.psdED = psd_create(ns->ed.sdED, pg);
hig-flow-kernel.c:        psd_synced_mapper(ns->ed.psdED);
hig-flow-kernel.c:    if (ns->contr.flowtype == 2) {
hig-flow-kernel.c:        ns->ed.psdED = psd_create(ns->ed.sdED, pg);
hig-flow-kernel.c:        psd_synced_mapper(ns->ed.psdED);
hig-flow-kernel.c:    if (ns->contr.flowtype == 3) {
hig-flow-kernel.c:        ns->ed.psdED = psd_create(ns->ed.sdED, pg);
hig-flow-kernel.c:        psd_synced_mapper(ns->ed.psdED);
hig-flow-kernel.c:    if (ns->contr.flowtype == 4) {
hig-flow-kernel.c:        ns->ed.psdED = psd_create(ns->ed.sdED, pg);
hig-flow-kernel.c:        psd_synced_mapper(ns->ed.psdED);
hig-flow-kernel.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-kernel.c:        ns->ed.eo.psdEOphi = psd_create(ns->ed.eo.sdEOphi, pg);
hig-flow-kernel.c:        psd_synced_mapper(ns->ed.eo.psdEOphi);
hig-flow-kernel.c:        ns->ed.eo.psdEOpsi = psd_create(ns->ed.eo.sdEOpsi, pg);
hig-flow-kernel.c:        psd_synced_mapper(ns->ed.eo.psdEOpsi);
hig-flow-kernel.c:        ns->ed.eo.psdEOnplus = psd_create(ns->ed.eo.sdEOnplus, pg);
hig-flow-kernel.c:        psd_synced_mapper(ns->ed.eo.psdEOnplus);
hig-flow-kernel.c:        ns->ed.eo.psdEOnminus = psd_create(ns->ed.eo.sdEOnminus, pg);
hig-flow-kernel.c:        psd_synced_mapper(ns->ed.eo.psdEOnminus);
hig-flow-kernel.c:            ns->ed.eo.sfdEOFeo[dim] = sfd_create(NULL, dim);
hig-flow-kernel.c:            sfd_set_interpolator_order(ns->ed.eo.sfdEOFeo[dim], order);   
hig-flow-kernel.c:            sfd_copy_higtrees_from_center_domain(ns->ed.eo.sfdEOFeo[dim], ns->ed.eo.sdEOpsi);
hig-flow-kernel.c:            sfd_adjust_facet_ids(ns->ed.eo.sfdEOFeo[dim]);
hig-flow-kernel.c:            ns->ed.eo.psfdEOFeo[dim] = psfd_create(ns->ed.eo.sfdEOFeo[dim], ns->ed.eo.psdEOpsi);
hig-flow-kernel.c:            psfd_compute_sfbi(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-kernel.c:            psfd_synced_mapper(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-kernel.c:    ns->dpp     = psd_create_property(ns->psdp);
hig-flow-kernel.c:    ns->ddeltap = psd_create_property(ns->psdp);
hig-flow-kernel.c:    ns->dpF     = psd_create_property(ns->psdF);
hig-flow-kernel.c:        ns->dpu[dim]     = psfd_create_property(ns->psfdu[dim]);
hig-flow-kernel.c:        ns->dpustar[dim] = psfd_create_property(ns->psfdu[dim]);
hig-flow-kernel.c:        ns->dpuaux[dim]  = psfd_create_property(ns->psfdu[dim]);
hig-flow-kernel.c:        ns->dpFU[dim]    = psfd_create_property(ns->psfdF[dim]);
hig-flow-kernel.c:    if (ns->contr.flowtype == 1) {
hig-flow-kernel.c:         ns->ed.visc.dpvisc  = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:                  ns->ed.gn.dpD[i][j] = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:    if (ns->contr.flowtype == 2) {
hig-flow-kernel.c:         ns->ed.visc.dpvisc  = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:         ns->ed.dens.dpdens  = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:    if (ns->contr.flowtype == 3) {
hig-flow-kernel.c:                  ns->ed.ve.dpD[i][j]      = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:                  ns->ed.ve.dpS[i][j]      = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:                  ns->ed.ve.dpKernel[i][j] = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:    if (ns->contr.flowtype == 4) {
hig-flow-kernel.c:                  ns->ed.im.dpD[i][j] = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:                  ns->ed.im.dpS[i][j] = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:                      ns->ed.im.dpB[k][i][j] = psd_create_property(ns->ed.psdED);
hig-flow-kernel.c:    if (ns->contr.modelflowtype == 1) {
hig-flow-kernel.c:            ns->ed.eo.dpFeo[dim]      = psfd_create_property(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-kernel.c:        ns->ed.eo.dpphi      = psd_create_property(ns->ed.eo.psdEOphi);
hig-flow-kernel.c:        ns->ed.eo.dppsi      = psd_create_property(ns->ed.eo.psdEOpsi);
hig-flow-kernel.c:        ns->ed.eo.dpnplus    = psd_create_property(ns->ed.eo.psdEOnplus);
hig-flow-kernel.c:        ns->ed.eo.dpnminus   = psd_create_property(ns->ed.eo.psdEOnminus);
hig-flow-kernel.c:    ns->stn   = stn_create();
hig-flow-kernel.c:    ns->stnF  = stn_create();
hig-flow-kernel.c:    ns->ed.stn = stn_create();
hig-flow-kernel.c:        sd_add_higtree(ns->sdp, root);
hig-flow-kernel.c:        if (ns->contr.flowtype > 0) {
hig-flow-kernel.c:            sd_add_higtree(ns->ed.sdED, root);
hig-flow-kernel.c:        if (ns->contr.modelflowtype == 1) {
hig-flow-kernel.c:            sd_add_higtree(ns->ed.eo.sdEOphi, root);
hig-flow-kernel.c:            sd_add_higtree(ns->ed.eo.sdEOpsi, root);
hig-flow-kernel.c:            sd_add_higtree(ns->ed.eo.sdEOnplus, root);
hig-flow-kernel.c:            sd_add_higtree(ns->ed.eo.sdEOnminus, root);
hig-flow-kernel.c:    ns->func.get_pressure = get_pressure;
hig-flow-kernel.c:    ns->func.get_velocity = get_velocity;
hig-flow-kernel.c:    ns->func.get_source_term = get_source_term;
hig-flow-kernel.c:    ns->func.get_facet_source_term = get_facet_source_term;
hig-flow-kernel.c:    ns->func.get_boundary_pressure = get_boundary_pressure;
hig-flow-kernel.c:    ns->func.get_boundary_velocity = get_boundary_velocity;
hig-flow-kernel.c:    ns->func.get_boundary_source_term = get_boundary_source_term;
hig-flow-kernel.c:    ns->func.get_boundary_facet_source_term = get_boundary_facet_source_term;
hig-flow-step.c:    if (ns->contr.desingpressure == 1) {
hig-flow-step.c:            sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:            t = ns->par.t;
hig-flow-step.c:            dt = ns->par.dt;
hig-flow-step.c:            if (ns->contr.projtype == 1) {
hig-flow-step.c:                value = ns->func.get_pressure(ccenter2,t+dt) - dp_get_value(ns->dpp, clid);
hig-flow-step.c:                value = ns->func.get_pressure(ccenter2,t+dt);
hig-flow-step.c:            cgid = psd_lid_to_gid(ns->psdp, clid);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step.c:            real ustarl = compute_facet_u_left(sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpustar[dim], ns->stn, &infacet);
hig-flow-step.c:            real ustarr = compute_facet_u_right(sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpustar[dim], ns->stn, &infacet);
hig-flow-step.c:        stn_reset(ns->stn);
hig-flow-step.c:        stn_set_rhs(ns->stn, sumdudx / ns->par.dt);
hig-flow-step.c:            sd_get_stencil(sdp, ccenter, p, w, ns->stn);
hig-flow-step.c:            sd_get_stencil(sdp, ccenter, p, w, ns->stn);
hig-flow-step.c:        sd_get_stencil(sdp, ccenter, ccenter, alpha, ns->stn);
hig-flow-step.c:        int *ids   = psd_stn_get_gids(ns->psdp, ns->stn);
hig-flow-step.c:        real *vals = stn_get_vals(ns->stn);
hig-flow-step.c:        int numelems = stn_get_numelems(ns->stn);
hig-flow-step.c:        int cgid = psd_get_global_id(ns->psdp, c);
hig-flow-step.c:        slv_set_bi(ns->slvp, cgid, stn_get_rhs(ns->stn));
hig-flow-step.c:        slv_set_Ai(ns->slvp, cgid, numelems, ids, vals);
hig-flow-step.c:    remove_pressure_singularity(ns, ns->slvp);
hig-flow-step.c:    slv_assemble(ns->slvp);
hig-flow-step.c:    slv_solve(ns->slvp);
hig-flow-step.c:    distributed_property *dp = (ns->contr.projtype == 1) ? ns->ddeltap : ns->dpp;
hig-flow-step.c:    dp_slv_load_from_solver(dp, ns->slvp);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step.c:	set_outflow(ns->psfdu[dim], ns->dpu[dim], 1.0);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step.c:	set_outflow(ns->psfdu[dim], ns->dpustar[dim], 1.0);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step.c:            if (ns->contr.projtype == 1) {
hig-flow-step.c:                pl    = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->ddeltap, ns->stn);
hig-flow-step.c:                pr    = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->ddeltap, ns->stn);
hig-flow-step.c:                pl    = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-step.c:                pr    = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-step.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step.c:            real utdt  = ustar - ns->par.dt * dpdx;
hig-flow-step.c:            dp_set_value(ns->dpu[dim], flid, utdt);
hig-flow-step.c:        dp_sync(ns->dpu[dim]);
hig-flow-step.c:    if (ns->contr.projtype == 1) {
hig-flow-step.c:        sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:            real p      = dp_get_value(ns->dpp, clid);
hig-flow-step.c:            real deltap = dp_get_value(ns->ddeltap, clid);
hig-flow-step.c:            dp_set_value(ns->dpp, clid, newp);
hig-flow-step.c:        dp_sync(ns->dpp);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdF);
hig-flow-step.c:        real F      = ns->func.get_source_term(ccenter, ns->par.t);
hig-flow-step.c:        dp_set_value(ns->dpF, clid, F);
hig-flow-step.c:    dp_sync(ns->dpF);
hig-flow-step.c:    //sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdF[dim] = psfd_get_local_domain(ns->psfdF[dim]);
hig-flow-step.c:            real F = ns->func.get_facet_source_term(fcenter, dim, ns->par.t);
hig-flow-step.c:            dp_set_value(ns->dpFU[dim], flid, F);
hig-flow-step.c:        dp_sync(ns->dpFU[dim]);
hig-flow-step.c:        sfdu[dim]      = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step.c:                    real t   = ns->par.t + ns->par.dt;
hig-flow-step.c:                    real val = ns->func.get_boundary_velocity(userid, bccenter, dim, t);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:                real t = ns->par.t + ns->par.dt;
hig-flow-step.c:                if (ns->contr.projtype == 0) {
hig-flow-step.c:                     val = ns->func.get_boundary_pressure(userid, bccenter, t);
hig-flow-step.c:                     val = ns->func.get_boundary_pressure(userid, bccenter, t) -
hig-flow-step.c:                           ns->func.get_boundary_pressure(userid, bccenter, ns->par.t);
hig-flow-step.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-step.c:            sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step.c:            higflow_computational_cell(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step.c:            real ustar = ns->cc.ucell + ns->par.dt * rhs;
hig-flow-step.c:    higflow_explicit_euler_intermediate_velocity(ns, ns->dpu, ns->dpuaux);
hig-flow-step.c:    higflow_explicit_euler_intermediate_velocity(ns, ns->dpuaux, ns->dpustar);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step.c:            dp_set_value(ns->dpustar[dim], flid, urk2);
hig-flow-step.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step.c:    higflow_explicit_euler_intermediate_velocity(ns, ns->dpu, ns->dpuaux);
hig-flow-step.c:    higflow_explicit_euler_intermediate_velocity(ns, ns->dpuaux, ns->dpustar);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step.c:            dp_set_value(ns->dpuaux[dim], flid, urk3);
hig-flow-step.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step.c:    higflow_explicit_euler_intermediate_velocity(ns, ns->dpuaux, ns->dpustar);
hig-flow-step.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step.c:            dp_set_value(ns->dpustar[dim], flid, urk3);
hig-flow-step.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step.c:            higflow_computational_cell(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step.c:            rhs *= ns->par.dt;
hig-flow-step.c:            rhs += ns->cc.ucell;
hig-flow-step.c:            stn_reset(ns->stn);
hig-flow-step.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step.c:                real w = - ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step.c:        slv_solve(ns->slvu[dim]);
hig-flow-step.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step.c:            higflow_computational_cell(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step.c:            rhs *= ns->par.dt;
hig-flow-step.c:            rhs += ns->cc.ucell;
hig-flow-step.c:            stn_reset(ns->stn);
hig-flow-step.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step.c:                real w = - 0.5 * ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step.c:        slv_solve(ns->slvu[dim]);
hig-flow-step.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step.c:            higflow_computational_cell(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step.c:            rhs *= 0.5*ns->par.dt;
hig-flow-step.c:            rhs += 0.25*ns->par.dt*higflow_difusive_term(ns, fdelta);
hig-flow-step.c:            rhs += ns->cc.ucell;
hig-flow-step.c:            stn_reset(ns->stn);
hig-flow-step.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step.c:                real w = - 0.25*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step.c:        slv_solve(ns->slvu[dim]);
hig-flow-step.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step.c:            real uaux = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step.c:            dp_set_value(ns->dpuaux[dim], flid, uaux);
hig-flow-step.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step.c:            higflow_computational_cell(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step.c:            real uaux = dp_get_value(ns->dpuaux[dim], flid);
hig-flow-step.c:            rhs *= 1.0/3.0*ns->par.dt;
hig-flow-step.c:            rhs += (4.0*uaux - ns->cc.ucell)/3.0;
hig-flow-step.c:            stn_reset(ns->stn);
hig-flow-step.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step.c:                real w = - 1.0/3.0*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step.c:        slv_solve(ns->slvu[dim]);
hig-flow-step.c:        //Vec *vecu = slv_get_solution_vec(ns->slvu[dim]);
hig-flow-step.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step.c:            real ustar = slv_get_xi(ns->slvu[dim], flid);
hig-flow-step.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step.c:    switch (ns->contr.tempdiscrtype) {
hig-flow-step.c:           higflow_explicit_euler_intermediate_velocity(ns, ns->dpu, ns->dpustar);
hig-flow-step.c:           higflow_semi_implicit_bdf2_intermediate_velocity(ns, ns->dpu, ns->dpustar);
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOnplus);
hig-flow-step-electroosmotic.c:                real t = ns->par.t + ns->par.dt;
hig-flow-step-electroosmotic.c:                real val = ns->ed.eo.get_boundary_electroosmotic_nplus(userid, bccenter, t);
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-step-electroosmotic.c:                real t = ns->par.t + ns->par.dt;
hig-flow-step-electroosmotic.c:                real val = ns->ed.eo.get_boundary_electroosmotic_nminus(userid, bccenter, t);
hig-flow-step-electroosmotic.c:    if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic.c:        real alphaeo = ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic.c:        sim_domain *sdnplus  = psd_get_local_domain(ns->ed.eo.psdEOnplus);
hig-flow-step-electroosmotic.c:        sim_domain *sdnminus = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-step-electroosmotic.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic.c:            nplus = compute_value_at_point(ns->ed.eo.sdEOnplus, ccenter, ccenter, 1.0, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-step-electroosmotic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnplus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnplus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnplus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnplus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:                        rhs    -= higflow_convective_ionic_term_cubista(ns, ns->dpu[dim], ns->ed.eo.dpnplus, ns->ed.eo.sdEOnplus, ns->ed.stn, nplus, ccenter, cdelta, dim);
hig-flow-step-electroosmotic.c:            real newnplus =  nplus + ns->par.dt * rhs;
hig-flow-step-electroosmotic.c:            dp_set_value(ns->ed.eo.dpnplus, clid, newnplus);
hig-flow-step-electroosmotic.c:        dp_sync(ns->ed.eo.dpnplus);
hig-flow-step-electroosmotic.c:    if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic.c:        real alphaeo = ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic.c:        real tol   = ns->ed.ve.par.kernel_tol;
hig-flow-step-electroosmotic.c:        sim_domain *sdnminus = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-step-electroosmotic.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic.c:            nminus = compute_value_at_point(ns->ed.eo.sdEOnminus, ccenter, ccenter, 1.0, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-step-electroosmotic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnminus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnminus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnminus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnminus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:                        rhs    -= higflow_convective_ionic_term_cubista(ns, ns->dpu[dim], ns->ed.eo.dpnminus, ns->ed.eo.sdEOnminus, ns->ed.stn, nminus, ccenter, cdelta, dim);
hig-flow-step-electroosmotic.c:            real newnminus =  nminus + ns->par.dt * rhs;
hig-flow-step-electroosmotic.c:            dp_set_value(ns->ed.eo.dpnminus, clid, newnminus);
hig-flow-step-electroosmotic.c:        dp_sync(ns->ed.eo.dpnminus);
hig-flow-step-electroosmotic.c:    if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic.c:        sim_domain *sdnplus  = psd_get_local_domain(ns->ed.eo.psdEOnplus);
hig-flow-step-electroosmotic.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic.c:            nplus = compute_value_at_point(ns->ed.eo.sdEOnplus, ccenter, ccenter, 1.0, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-step-electroosmotic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnplus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnplus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnplus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnplus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:                        rhs    -= higflow_convective_ionic_term_cubista(ns, ns->dpu[dim], ns->ed.eo.dpnplus, ns->ed.eo.sdEOnplus, ns->ed.stn, nplus, ccenter, cdelta, dim);
hig-flow-step-electroosmotic.c:            rhs *= ns->par.dt;
hig-flow-step-electroosmotic.c:            rhs += ns->cc.ncell;
hig-flow-step-electroosmotic.c:            stn_reset(ns->ed.stn);
hig-flow-step-electroosmotic.c:            stn_set_rhs(ns->ed.stn,rhs);
hig-flow-step-electroosmotic.c:                real w  = -ns->par.dt/(ns->ed.eo.par.Pe*cdelta[dim2]*cdelta[dim2]);
hig-flow-step-electroosmotic.c:                sd_get_stencil(sdnplus, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic.c:                sd_get_stencil(sdnplus, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic.c:            sd_get_stencil(sdnplus, ccenter, ccenter,alpha, ns->ed.stn);
hig-flow-step-electroosmotic.c:            int *ids   = psd_stn_get_gids(ns->ed.eo.psdEOnplus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            real *vals = stn_get_vals(ns->ed.stn);
hig-flow-step-electroosmotic.c:            int numelems = stn_get_numelems(ns->ed.stn);
hig-flow-step-electroosmotic.c:	    int cgid = psd_get_global_id(ns->ed.eo.psdEOnplus, c);
hig-flow-step-electroosmotic.c:            slv_set_bi(ns->ed.eo.slvnplus, cgid, stn_get_rhs(ns->ed.stn));
hig-flow-step-electroosmotic.c:            slv_set_Ai(ns->ed.eo.slvnplus, cgid, numelems, ids, vals);
hig-flow-step-electroosmotic.c:        slv_assemble(ns->ed.eo.slvnplus);
hig-flow-step-electroosmotic.c:        slv_solve(ns->ed.eo.slvnplus);
hig-flow-step-electroosmotic.c:        dp_slv_load_from_solver(ns->ed.eo.dpnplus, ns->ed.eo.slvnplus);
hig-flow-step-electroosmotic.c:        dp_sync(ns->ed.eo.dpnplus);
hig-flow-step-electroosmotic.c:    if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic.c:        sim_domain *sdnminus = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-step-electroosmotic.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic.c:            nminus = compute_value_at_point(ns->ed.eo.sdEOnminus, ccenter, ccenter, 1.0, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-step-electroosmotic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnminus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnminus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnminus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnminus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:                        rhs    -= higflow_convective_ionic_term_cubista(ns, ns->dpu[dim], ns->ed.eo.dpnminus, ns->ed.eo.sdEOnminus, ns->ed.stn, nminus, ccenter, cdelta, dim);
hig-flow-step-electroosmotic.c:            rhs *= ns->par.dt;
hig-flow-step-electroosmotic.c:            rhs += ns->cc.ncell;
hig-flow-step-electroosmotic.c:            stn_reset(ns->ed.stn);
hig-flow-step-electroosmotic.c:            stn_set_rhs(ns->ed.stn,rhs);
hig-flow-step-electroosmotic.c:                real w   = -ns->par.dt/(ns->ed.eo.par.Pe*cdelta[dim2]*cdelta[dim2]);
hig-flow-step-electroosmotic.c:                sd_get_stencil(sdnminus, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic.c:                sd_get_stencil(sdnminus, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic.c:            sd_get_stencil(sdnminus, ccenter, ccenter,alpha2, ns->ed.stn);
hig-flow-step-electroosmotic.c:            int *ids   = psd_stn_get_gids(ns->ed.eo.psdEOnminus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            real *vals = stn_get_vals(ns->ed.stn);
hig-flow-step-electroosmotic.c:            int numelems = stn_get_numelems(ns->ed.stn);
hig-flow-step-electroosmotic.c:	    int cgid = psd_get_global_id(ns->ed.eo.psdEOnminus, c);
hig-flow-step-electroosmotic.c:            slv_set_bi(ns->ed.eo.slvnminus, cgid, stn_get_rhs(ns->ed.stn));
hig-flow-step-electroosmotic.c:            slv_set_Ai(ns->ed.eo.slvnminus, cgid, numelems, ids, vals);
hig-flow-step-electroosmotic.c:        slv_assemble(ns->ed.eo.slvnminus);
hig-flow-step-electroosmotic.c:        slv_solve(ns->ed.eo.slvnminus);
hig-flow-step-electroosmotic.c:        dp_slv_load_from_solver(ns->ed.eo.dpnminus, ns->ed.eo.slvnminus);
hig-flow-step-electroosmotic.c:        dp_sync(ns->ed.eo.dpnminus);
hig-flow-step-electroosmotic.c:        real ul = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic.c:        real ur = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic.c:    vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic.c:    vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic.c:        real nleft = compute_center_p_left_22(ns->ed.eo.sdEOnminus, ccenter, cdelta, dim, 1.0, ns->ed.eo.dpnminus, ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic.c:        real nright = compute_center_p_right_22(ns->ed.eo.sdEOnminus, ccenter, cdelta, dim, 1.0, ns->ed.eo.dpnminus, ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic.c:        real nleft = compute_center_p_left_22(ns->ed.eo.sdEOnplus, ccenter, cdelta, dim, 1.0, ns->ed.eo.dpnplus, ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic.c:        real nright = compute_center_p_right_22(ns->ed.eo.sdEOnplus, ccenter, cdelta, dim, 1.0, ns->ed.eo.dpnplus, ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic.c:    real alphaeo = ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic.c:    real delta   = ns->ed.eo.par.delta;
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic.c:        stn_reset(ns->ed.stn);
hig-flow-step-electroosmotic.c:        if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic.c:            nplus    = dp_get_value(ns->ed.eo.dpnplus, clid);
hig-flow-step-electroosmotic.c:            nminus   = dp_get_value(ns->ed.eo.dpnminus, clid);
hig-flow-step-electroosmotic.c:        stn_set_rhs(ns->ed.stn, rhs);
hig-flow-step-electroosmotic.c:            sd_get_stencil(sdp, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic.c:            sd_get_stencil(sdp, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic.c:        switch (ns->ed.eo.contr.eo_model) {
hig-flow-step-electroosmotic.c:        sd_get_stencil(sdp, ccenter, ccenter, alpha, ns->ed.stn);
hig-flow-step-electroosmotic.c:        int *ids   = psd_stn_get_gids(ns->ed.eo.psdEOpsi, ns->ed.stn);
hig-flow-step-electroosmotic.c:        real *vals = stn_get_vals(ns->ed.stn);
hig-flow-step-electroosmotic.c:        int numelems = stn_get_numelems(ns->ed.stn);
hig-flow-step-electroosmotic.c:        int cgid = psd_get_global_id(ns->ed.eo.psdEOpsi, c);
hig-flow-step-electroosmotic.c:        slv_set_bi(ns->ed.eo.slvpsi, cgid, stn_get_rhs(ns->ed.stn));
hig-flow-step-electroosmotic.c:        slv_set_Ai(ns->ed.eo.slvpsi, cgid, numelems, ids, vals);
hig-flow-step-electroosmotic.c:    slv_assemble(ns->ed.eo.slvpsi);
hig-flow-step-electroosmotic.c:    slv_solve(ns->ed.eo.slvpsi);
hig-flow-step-electroosmotic.c:    dp_slv_load_from_solver(ns->ed.eo.dppsi, ns->ed.eo.slvpsi);
hig-flow-step-electroosmotic.c:    dp_sync(ns->ed.eo.dppsi);
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic.c:        stn_reset(ns->ed.stn);
hig-flow-step-electroosmotic.c:        stn_set_rhs(ns->ed.stn, 0.0);
hig-flow-step-electroosmotic.c:            sd_get_stencil(sdp, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic.c:            sd_get_stencil(sdp, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic.c:        sd_get_stencil(sdp, ccenter, ccenter, alpha, ns->ed.stn);
hig-flow-step-electroosmotic.c:        int *ids   = psd_stn_get_gids(ns->ed.eo.psdEOphi, ns->ed.stn);
hig-flow-step-electroosmotic.c:        real *vals = stn_get_vals(ns->ed.stn);
hig-flow-step-electroosmotic.c:        int numelems = stn_get_numelems(ns->ed.stn);
hig-flow-step-electroosmotic.c:        int cgid = psd_get_global_id(ns->ed.eo.psdEOphi, c);
hig-flow-step-electroosmotic.c:        slv_set_bi(ns->ed.eo.slvphi, cgid, stn_get_rhs(ns->ed.stn));
hig-flow-step-electroosmotic.c:        slv_set_Ai(ns->ed.eo.slvphi, cgid, numelems, ids, vals);
hig-flow-step-electroosmotic.c:    slv_assemble(ns->ed.eo.slvphi);
hig-flow-step-electroosmotic.c:    slv_solve(ns->ed.eo.slvphi);
hig-flow-step-electroosmotic.c:    dp_slv_load_from_solver(ns->ed.eo.dpphi, ns->ed.eo.slvphi);
hig-flow-step-electroosmotic.c:    dp_sync(ns->ed.eo.dpphi);
hig-flow-step-electroosmotic.c:    real alphaeo = ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic.c:    real delta   = ns->ed.eo.par.delta;
hig-flow-step-electroosmotic.c:    sim_domain *sdpsi = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic.c:    sim_domain *sdphi  = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic.c:        sfdF[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic.c:            psil        = compute_center_p_left(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psir        = compute_center_p_right(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psil        = compute_center_p_left(sdpsi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psir        = compute_center_p_right(sdpsi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psil     = compute_center_p_left(ns->ed.eo.sdEOnplus, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psir     = compute_center_p_right(ns->ed.eo.sdEOnplus, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psil     = compute_center_p_left(ns->ed.eo.sdEOnminus, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psir     = compute_center_p_right(ns->ed.eo.sdEOnminus, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-step-electroosmotic.c:            Feo   += ns->ed.eo.get_electroosmotic_source_term(fcenter, dim, ns->par.t);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], flid, Feo);
hig-flow-step-electroosmotic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-step-electroosmotic.c:    real alphaeo= ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic.c:    real delta  = ns->ed.eo.par.delta;
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic.c:    sim_domain *sdphi = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic.c:        sfdF[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic.c:            psil        = compute_center_p_left(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psir        = compute_center_p_right(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psil        = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psir        = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            Feo        += ns->ed.eo.get_electroosmotic_source_term(fcenter, dim, ns->par.t);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], flid, Feo);
hig-flow-step-electroosmotic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-step-electroosmotic.c:    real alphaeo= ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic.c:    real delta  = ns->ed.eo.par.delta;
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic.c:    sim_domain *sdphi = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic.c:        sfdF[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic.c:            psil        = compute_center_p_left(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psir        = compute_center_p_right(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psil        = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            psir        = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic.c:            Feo  += ns->ed.eo.get_electroosmotic_source_term(fcenter, dim, ns->par.t);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], flid, Feo);
hig-flow-step-electroosmotic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-step-electroosmotic.c:    //sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic.c:        sfdF[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic.c:            Feo     += ns->ed.eo.get_electroosmotic_source_term(fcenter, dim, ns->par.t);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], flid, Feo);
hig-flow-step-electroosmotic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-step-electroosmotic.c:        sfdFeo[dim]      = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic.c:                    real t   = ns->par.t + ns->par.dt;
hig-flow-step-electroosmotic.c:                    real val = ns->ed.eo.get_boundary_electroosmotic_source_term(userid, bccenter, dim, t);
hig-flow-step-electroosmotic.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic.c:            sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-electroosmotic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic.c:            real ustar = ns->cc.ucell + ns->par.dt * rhs;
hig-flow-step-electroosmotic.c:	//set_outflow(ns->psfdu[dim], ns->dpustar[dim], 20.0);
hig-flow-step-electroosmotic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpu, ns->dpuaux);
hig-flow-step-electroosmotic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-electroosmotic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-electroosmotic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->dpustar[dim], flid, urk2);
hig-flow-step-electroosmotic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpu, ns->dpuaux);
hig-flow-step-electroosmotic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-electroosmotic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-electroosmotic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->dpuaux[dim], flid, urk3);
hig-flow-step-electroosmotic.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-electroosmotic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-electroosmotic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-electroosmotic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-electroosmotic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->dpustar[dim], flid, urk3);
hig-flow-step-electroosmotic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-electroosmotic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic.c:            rhs *= ns->par.dt;
hig-flow-step-electroosmotic.c:            rhs += ns->cc.ucell;
hig-flow-step-electroosmotic.c:            stn_reset(ns->stn);
hig-flow-step-electroosmotic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-electroosmotic.c:                real w  = -ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-electroosmotic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step-electroosmotic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-electroosmotic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-electroosmotic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-electroosmotic.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-electroosmotic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-electroosmotic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-electroosmotic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-electroosmotic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic.c:            rhs *= ns->par.dt;
hig-flow-step-electroosmotic.c:            rhs += ns->cc.ucell;
hig-flow-step-electroosmotic.c:            stn_reset(ns->stn);
hig-flow-step-electroosmotic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-electroosmotic.c:                real w  = -0.5*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-electroosmotic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step-electroosmotic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-electroosmotic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-electroosmotic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-electroosmotic.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-electroosmotic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-electroosmotic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-electroosmotic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-electroosmotic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic.c:            rhs *= 0.5*ns->par.dt;
hig-flow-step-electroosmotic.c:            rhs += 0.25*ns->par.dt*higflow_difusive_term(ns, fdelta);
hig-flow-step-electroosmotic.c:            rhs += ns->cc.ucell;
hig-flow-step-electroosmotic.c:            stn_reset(ns->stn);
hig-flow-step-electroosmotic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-electroosmotic.c:                real w  = -0.25*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-electroosmotic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-electroosmotic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-electroosmotic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-electroosmotic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-electroosmotic.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-electroosmotic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-electroosmotic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic.c:            real uaux = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->dpuaux[dim], flid, uaux);
hig-flow-step-electroosmotic.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-electroosmotic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic.c:            real uaux = dp_get_value(ns->dpuaux[dim], flid);
hig-flow-step-electroosmotic.c:            rhs *= ns->par.dt/3.0;
hig-flow-step-electroosmotic.c:            rhs += (4.0*uaux - ns->cc.ucell)/3.0;
hig-flow-step-electroosmotic.c:            stn_reset(ns->stn);
hig-flow-step-electroosmotic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-electroosmotic.c:                real w  = - 1.0/3.0*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-electroosmotic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step-electroosmotic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-electroosmotic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-electroosmotic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-electroosmotic.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-electroosmotic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-electroosmotic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:        //Vec *vecu = slv_get_solution_vec(ns->slvu[dim]);
hig-flow-step-electroosmotic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic.c:            real ustar = slv_get_xi(ns->slvu[dim], flid);
hig-flow-step-electroosmotic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-electroosmotic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic.c:    switch (ns->ed.eo.contr.eo_model) {
hig-flow-step-electroosmotic.c: //          higflow_electroosmotic_phi(ns);  // está sendo calculado no ¨ns-example-2d.c¨
hig-flow-step-electroosmotic.c: //          higflow_electroosmotic_phi(ns);  // está sendo calculado no ¨ns-example-2d.c¨
hig-flow-step-electroosmotic.c:    switch (ns->contr.tempdiscrtype) {
hig-flow-step-electroosmotic.c:           higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpu, ns->dpustar);
hig-flow-step-electroosmotic.c:           higflow_semi_implicit_bdf2_intermediate_velocity_electroosmotic(ns, ns->dpu, ns->dpustar);
hig-flow-step-electroosmotic-viscoelastic.c:    if (ns->contr.flowtype == 3) {
hig-flow-step-electroosmotic-viscoelastic.c:        real Re   = ns->par.Re;
hig-flow-step-electroosmotic-viscoelastic.c:        real De   = ns->ed.ve.par.De;
hig-flow-step-electroosmotic-viscoelastic.c:        real beta = ns->ed.ve.par.beta;
hig-flow-step-electroosmotic-viscoelastic.c:        real tol  = ns->ed.ve.par.kernel_tol;
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-electroosmotic-viscoelastic.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                   dp_set_value(ns->ed.ve.dpKernel[i][j], clid, Kernel[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:                dp_sync(ns->ed.ve.dpKernel[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:    if (ns->contr.flowtype == 3) {
hig-flow-step-electroosmotic-viscoelastic.c:        real Re   = ns->par.Re;
hig-flow-step-electroosmotic-viscoelastic.c:        real De   = ns->ed.ve.par.De;
hig-flow-step-electroosmotic-viscoelastic.c:        real beta = ns->ed.ve.par.beta;
hig-flow-step-electroosmotic-viscoelastic.c:        real tol  = ns->ed.ve.par.kernel_tol;
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-electroosmotic-viscoelastic.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                    Kernel[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                B[i][i] = ns->ed.ve.get_kernel_inverse(i, lambda[i], tol);
hig-flow-step-electroosmotic-viscoelastic.c:                   dp_set_value(ns->ed.ve.dpS[i][j], clid, S[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:                dp_sync(ns->ed.ve.dpS[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:    if (ns->contr.flowtype == 3) {
hig-flow-step-electroosmotic-viscoelastic.c:        real Re    = ns->par.Re;
hig-flow-step-electroosmotic-viscoelastic.c:        real De    = ns->ed.ve.par.De;
hig-flow-step-electroosmotic-viscoelastic.c:        real beta  = ns->ed.ve.par.beta;
hig-flow-step-electroosmotic-viscoelastic.c:        real tol   = ns->ed.ve.par.kernel_tol;
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-electroosmotic-viscoelastic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic-viscoelastic.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                    Kernel[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            switch (ns->ed.ve.contr.model) {
hig-flow-step-electroosmotic-viscoelastic.c:                    switch (ns->ed.ve.contr.convecdiscrtype) {
hig-flow-step-electroosmotic-viscoelastic.c:                                rhs -= hig_flow_convective_tensor_term_cubista(ns, ns->dpu[dim], ns->ed.sdED, ns->ed.stn, Kernel, ccenter, cdelta, dim, i, j);
hig-flow-step-electroosmotic-viscoelastic.c:                    real kernel  = Kernel[i][j] + ns->par.dt * rhs;
hig-flow-step-electroosmotic-viscoelastic.c:                    dp_set_value(ns->ed.ve.dpS[i][j], clid, kernel);
hig-flow-step-electroosmotic-viscoelastic.c:                         dp_set_value(ns->ed.ve.dpS[j][i], clid, kernel);
hig-flow-step-electroosmotic-viscoelastic.c:                dp_sync(ns->ed.ve.dpS[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                    dp_set_value(ns->ed.ve.dpKernel[i][j], clid, S[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:                dp_sync(ns->ed.ve.dpKernel[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:    kl  = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_l); 
hig-flow-step-electroosmotic-viscoelastic.c:    kr  = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_r); 
hig-flow-step-electroosmotic-viscoelastic.c:    kll = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 2.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_ll);
hig-flow-step-electroosmotic-viscoelastic.c:    krr = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 2.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_rr);
hig-flow-step-electroosmotic-viscoelastic.c:    vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:            vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:            vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:    vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:            vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:            vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:    if (ns->contr.flowtype == 3) {
hig-flow-step-electroosmotic-viscoelastic.c:        real dt    = ns->par.dt;
hig-flow-step-electroosmotic-viscoelastic.c:        real Re    = ns->par.Re;
hig-flow-step-electroosmotic-viscoelastic.c:        real De    = ns->ed.ve.par.De;
hig-flow-step-electroosmotic-viscoelastic.c:        real beta  = ns->ed.ve.par.beta;
hig-flow-step-electroosmotic-viscoelastic.c:        real tol   = ns->ed.ve.par.kernel_tol;
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-electroosmotic-viscoelastic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic-viscoelastic.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                    Kernel[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            switch (ns->ed.ve.contr.model) {
hig-flow-step-electroosmotic-viscoelastic.c:                    switch (ns->ed.ve.contr.convecdiscrtype) {
hig-flow-step-electroosmotic-viscoelastic.c:                                rhs -= hig_flow_convective_tensor_term_cubista(ns, ns->dpu[dim], ns->ed.sdED, ns->ed.stn, Kernel, ccenter, cdelta, dim, i, j);
hig-flow-step-electroosmotic-viscoelastic.c:                    dp_set_value(ns->ed.ve.dpS[i][j], clid, kernel);
hig-flow-step-electroosmotic-viscoelastic.c:                        dp_set_value(ns->ed.ve.dpS[j][i], clid, kernel);
hig-flow-step-electroosmotic-viscoelastic.c:                dp_sync(ns->ed.ve.dpS[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                    dp_set_value(ns->ed.ve.dpKernel[i][j], clid, S[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:                dp_sync(ns->ed.ve.dpKernel[i][j]);
hig-flow-step-electroosmotic-viscoelastic.c:       Kernel_aux[i][i] = ns->ed.ve.get_kernel(i, lambda[i], tol);
hig-flow-step-electroosmotic-viscoelastic.c:        real jlambda = ns->ed.ve.get_kernel_jacobian(i, lambda[i], tol);
hig-flow-step-electroosmotic-viscoelastic.c:        real jlambda = ns->ed.ve.get_kernel_jacobian(i, lambda[i], tol);
hig-flow-step-electroosmotic-viscoelastic.c:        M_aux[i][i]  = (aux - ns->ed.ve.par.alpha*aux*aux)*jlambda;
hig-flow-step-electroosmotic-viscoelastic.c:        jlambda[i]   = ns->ed.ve.get_kernel_jacobian(i, lambda[i], tol);
hig-flow-step-electroosmotic-viscoelastic.c:        M_aux[i][i]  = (1.0-lambda[i])*(1.0 + ns->ed.ve.par.epsilon*ns->ed.ve.par.De*ns->par.Re*tr/(1.0-ns->ed.ve.par.beta))*jlambda[i];
hig-flow-step-electroosmotic-viscoelastic.c:            M_aux[i][j] += -2.0*(B[i][j]-B[i][j]*lambda[j])*ns->ed.ve.par.De*ns->ed.ve.par.psi*jlambda[j];
hig-flow-step-electroosmotic-viscoelastic.c:        real ul = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:        real ur = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:        real Kleft = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic-viscoelastic.c:        real Kright = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_right);
hig-flow-step-electroosmotic-viscoelastic.c:    if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic-viscoelastic.c:        real alphaeo = ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdnplus  = psd_get_local_domain(ns->ed.eo.psdEOnplus);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdnminus = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic-viscoelastic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic-viscoelastic.c:            nplus = compute_value_at_point(ns->ed.eo.sdEOnplus, ccenter, ccenter, 1.0, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-step-electroosmotic-viscoelastic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnplus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnplus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnplus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnplus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:                        rhs    -= higflow_convective_ionic_term_cubista(ns, ns->dpu[dim], ns->ed.eo.dpnplus, ns->ed.eo.sdEOnplus, ns->ed.stn, nplus, ccenter, cdelta, dim);
hig-flow-step-electroosmotic-viscoelastic.c:            real newnplus =  nplus + ns->par.dt * rhs;
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->ed.eo.dpnplus, clid, newnplus);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->ed.eo.dpnplus);
hig-flow-step-electroosmotic-viscoelastic.c:    if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic-viscoelastic.c:        real alphaeo = ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic-viscoelastic.c:        real tol   = ns->ed.ve.par.kernel_tol;
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdnminus = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic-viscoelastic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic-viscoelastic.c:            nminus = compute_value_at_point(ns->ed.eo.sdEOnminus, ccenter, ccenter, 1.0, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-step-electroosmotic-viscoelastic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnminus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnminus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnminus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnminus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:                        rhs    -= higflow_convective_ionic_term_cubista(ns, ns->dpu[dim], ns->ed.eo.dpnminus, ns->ed.eo.sdEOnminus, ns->ed.stn, nminus, ccenter, cdelta, dim);
hig-flow-step-electroosmotic-viscoelastic.c:            real newnminus =  nminus + ns->par.dt * rhs;
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->ed.eo.dpnminus, clid, newnminus);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->ed.eo.dpnminus);
hig-flow-step-electroosmotic-viscoelastic.c:    if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdnplus  = psd_get_local_domain(ns->ed.eo.psdEOnplus);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic-viscoelastic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic-viscoelastic.c:            nplus = compute_value_at_point(ns->ed.eo.sdEOnplus, ccenter, ccenter, 1.0, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-step-electroosmotic-viscoelastic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnplus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnplus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnplus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnplus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:                        rhs    -= higflow_convective_ionic_term_cubista(ns, ns->dpu[dim], ns->ed.eo.dpnplus, ns->ed.eo.sdEOnplus, ns->ed.stn, nplus, ccenter, cdelta, dim);
hig-flow-step-electroosmotic-viscoelastic.c:            rhs *= ns->par.dt;
hig-flow-step-electroosmotic-viscoelastic.c:            rhs += ns->cc.ncell;
hig-flow-step-electroosmotic-viscoelastic.c:            stn_reset(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            stn_set_rhs(ns->ed.stn,rhs);
hig-flow-step-electroosmotic-viscoelastic.c:                real w  = -ns->par.dt/(ns->ed.eo.par.Pe*cdelta[dim2]*cdelta[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:                sd_get_stencil(sdnplus, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                sd_get_stencil(sdnplus, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            sd_get_stencil(sdnplus, ccenter, ccenter,alpha, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int *ids   = psd_stn_get_gids(ns->ed.eo.psdEOnplus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            real *vals = stn_get_vals(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int numelems = stn_get_numelems(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:	    int cgid = psd_get_global_id(ns->ed.eo.psdEOnplus, c);
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_bi(ns->ed.eo.slvnplus, cgid, stn_get_rhs(ns->ed.stn));
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_Ai(ns->ed.eo.slvnplus, cgid, numelems, ids, vals);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_assemble(ns->ed.eo.slvnplus);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_solve(ns->ed.eo.slvnplus);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_slv_load_from_solver(ns->ed.eo.dpnplus, ns->ed.eo.slvnplus);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->ed.eo.dpnplus);
hig-flow-step-electroosmotic-viscoelastic.c:    if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdnminus = psd_get_local_domain(ns->ed.eo.psdEOnminus);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdpsi    = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic-viscoelastic.c:        sim_domain *sdphi    = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic-viscoelastic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-electroosmotic-viscoelastic.c:            nminus = compute_value_at_point(ns->ed.eo.sdEOnminus, ccenter, ccenter, 1.0, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            switch (ns->ed.eo.contr.convecdiscrtype) {
hig-flow-step-electroosmotic-viscoelastic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnminus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnminus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:                        higflow_computational_cell_electroosmotic_ionic(ns, sdnminus, sdpsi, sdphi, clid, ccenter, cdelta, dim, ns->ed.eo.dpnminus, ns->ed.eo.dppsi, ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:                        rhs    -= higflow_convective_ionic_term_cubista(ns, ns->dpu[dim], ns->ed.eo.dpnminus, ns->ed.eo.sdEOnminus, ns->ed.stn, nminus, ccenter, cdelta, dim);
hig-flow-step-electroosmotic-viscoelastic.c:            rhs *= ns->par.dt;
hig-flow-step-electroosmotic-viscoelastic.c:            rhs += ns->cc.ncell;
hig-flow-step-electroosmotic-viscoelastic.c:            stn_reset(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            stn_set_rhs(ns->ed.stn,rhs);
hig-flow-step-electroosmotic-viscoelastic.c:                real w   = -ns->par.dt/(ns->ed.eo.par.Pe*cdelta[dim2]*cdelta[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:                sd_get_stencil(sdnminus, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:                sd_get_stencil(sdnminus, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            sd_get_stencil(sdnminus, ccenter, ccenter,alpha2, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int *ids   = psd_stn_get_gids(ns->ed.eo.psdEOnminus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            real *vals = stn_get_vals(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int numelems = stn_get_numelems(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:	    int cgid = psd_get_global_id(ns->ed.eo.psdEOnminus, c);
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_bi(ns->ed.eo.slvnminus, cgid, stn_get_rhs(ns->ed.stn));
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_Ai(ns->ed.eo.slvnminus, cgid, numelems, ids, vals);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_assemble(ns->ed.eo.slvnminus);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_solve(ns->ed.eo.slvnminus);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_slv_load_from_solver(ns->ed.eo.dpnminus, ns->ed.eo.slvnminus);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->ed.eo.dpnminus);
hig-flow-step-electroosmotic-viscoelastic.c:    vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:    vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-electroosmotic-viscoelastic.c:        real nleft = compute_center_p_left_22(ns->ed.eo.sdEOnminus, ccenter, cdelta, dim, 1.0, ns->ed.eo.dpnminus, ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic-viscoelastic.c:        real nright = compute_center_p_right_22(ns->ed.eo.sdEOnminus, ccenter, cdelta, dim, 1.0, ns->ed.eo.dpnminus, ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic-viscoelastic.c:        real nleft = compute_center_p_left_22(ns->ed.eo.sdEOnplus, ccenter, cdelta, dim, 1.0, ns->ed.eo.dpnplus, ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic-viscoelastic.c:        real nright = compute_center_p_right_22(ns->ed.eo.sdEOnplus, ccenter, cdelta, dim, 1.0, ns->ed.eo.dpnplus, ns->ed.stn, &incell_left);
hig-flow-step-electroosmotic-viscoelastic.c:    real alphaeo = ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic-viscoelastic.c:    real delta   = ns->ed.eo.par.delta;
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic-viscoelastic.c:        stn_reset(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        if (ns->ed.eo.contr.eo_model == 0) {
hig-flow-step-electroosmotic-viscoelastic.c:            nplus    = dp_get_value(ns->ed.eo.dpnplus, clid);
hig-flow-step-electroosmotic-viscoelastic.c:            nminus   = dp_get_value(ns->ed.eo.dpnminus, clid);
hig-flow-step-electroosmotic-viscoelastic.c:        stn_set_rhs(ns->ed.stn, rhs);
hig-flow-step-electroosmotic-viscoelastic.c:            sd_get_stencil(sdp, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            sd_get_stencil(sdp, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        switch (ns->ed.eo.contr.eo_model) {
hig-flow-step-electroosmotic-viscoelastic.c:        sd_get_stencil(sdp, ccenter, ccenter, alpha, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        int *ids   = psd_stn_get_gids(ns->ed.eo.psdEOpsi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        real *vals = stn_get_vals(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        int numelems = stn_get_numelems(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        int cgid = psd_get_global_id(ns->ed.eo.psdEOpsi, c);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_set_bi(ns->ed.eo.slvpsi, cgid, stn_get_rhs(ns->ed.stn));
hig-flow-step-electroosmotic-viscoelastic.c:        slv_set_Ai(ns->ed.eo.slvpsi, cgid, numelems, ids, vals);
hig-flow-step-electroosmotic-viscoelastic.c:    slv_assemble(ns->ed.eo.slvpsi);
hig-flow-step-electroosmotic-viscoelastic.c:    slv_solve(ns->ed.eo.slvpsi);
hig-flow-step-electroosmotic-viscoelastic.c:    dp_slv_load_from_solver(ns->ed.eo.dppsi, ns->ed.eo.slvpsi);
hig-flow-step-electroosmotic-viscoelastic.c:    dp_sync(ns->ed.eo.dppsi);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic-viscoelastic.c:        stn_reset(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        stn_set_rhs(ns->ed.stn, 0.0);
hig-flow-step-electroosmotic-viscoelastic.c:            sd_get_stencil(sdp, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            sd_get_stencil(sdp, ccenter, p, w, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        sd_get_stencil(sdp, ccenter, ccenter, alpha, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        int *ids   = psd_stn_get_gids(ns->ed.eo.psdEOphi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        real *vals = stn_get_vals(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        int numelems = stn_get_numelems(ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:        int cgid = psd_get_global_id(ns->ed.eo.psdEOphi, c);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_set_bi(ns->ed.eo.slvphi, cgid, stn_get_rhs(ns->ed.stn));
hig-flow-step-electroosmotic-viscoelastic.c:        slv_set_Ai(ns->ed.eo.slvphi, cgid, numelems, ids, vals);
hig-flow-step-electroosmotic-viscoelastic.c:    slv_assemble(ns->ed.eo.slvphi);
hig-flow-step-electroosmotic-viscoelastic.c:    slv_solve(ns->ed.eo.slvphi);
hig-flow-step-electroosmotic-viscoelastic.c:    dp_slv_load_from_solver(ns->ed.eo.dpphi, ns->ed.eo.slvphi);
hig-flow-step-electroosmotic-viscoelastic.c:    dp_sync(ns->ed.eo.dpphi);
hig-flow-step-electroosmotic-viscoelastic.c:    real alphaeo= ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic-viscoelastic.c:    real delta  = ns->ed.eo.par.delta;
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdpsi = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdphi  = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdF[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            psil        = compute_center_p_left(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psir        = compute_center_p_right(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psil        = compute_center_p_left(sdpsi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psir        = compute_center_p_right(sdpsi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psil     = compute_center_p_left(ns->ed.eo.sdEOnplus, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psir     = compute_center_p_right(ns->ed.eo.sdEOnplus, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpnplus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psil     = compute_center_p_left(ns->ed.eo.sdEOnminus, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psir     = compute_center_p_right(ns->ed.eo.sdEOnminus, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpnminus, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            Feo   += ns->ed.eo.get_electroosmotic_source_term(fcenter, dim, ns->par.t);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], flid, Feo);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    real alphaeo= ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic-viscoelastic.c:    real delta  = ns->ed.eo.par.delta;
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdphi = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdF[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            psil        = compute_center_p_left(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psir        = compute_center_p_right(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psil        = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psir        = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            Feo        += ns->ed.eo.get_electroosmotic_source_term(fcenter, dim, ns->par.t);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], flid, Feo);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    real alphaeo= ns->ed.eo.par.alpha;
hig-flow-step-electroosmotic-viscoelastic.c:    real delta  = ns->ed.eo.par.delta;
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.eo.psdEOpsi);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdphi = psd_get_local_domain(ns->ed.eo.psdEOphi);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdF[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            psil        = compute_center_p_left(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psir        = compute_center_p_right(sdphi, fcenter, fdelta, dim, 0.5, ns->ed.eo.dpphi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psil        = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            psir        = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->ed.eo.dppsi, ns->ed.stn);
hig-flow-step-electroosmotic-viscoelastic.c:            Feo        += ns->ed.eo.get_electroosmotic_source_term(fcenter, dim, ns->par.t);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], flid, Feo);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    //sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdF[dim] = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            Feo     += ns->ed.eo.get_electroosmotic_source_term(fcenter, dim, ns->par.t);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->ed.eo.dpFeo[dim], flid, Feo);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->ed.eo.dpFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdFeo[dim]      = psfd_get_local_domain(ns->ed.eo.psfdEOFeo[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:                    real t   = ns->par.t + ns->par.dt;
hig-flow-step-electroosmotic-viscoelastic.c:                    real val = ns->ed.eo.get_boundary_electroosmotic_source_term(userid, bccenter, dim, t);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic-viscoelastic.c:            sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic-viscoelastic.c:            real ustar = ns->cc.ucell + ns->par.dt * rhs;
hig-flow-step-electroosmotic-viscoelastic.c:	//set_outflow(ns->psfdu[dim], ns->dpustar[dim], 20.0);
hig-flow-step-electroosmotic-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpu, ns->dpuaux);
hig-flow-step-electroosmotic-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, urk2);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpu, ns->dpuaux);
hig-flow-step-electroosmotic-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->dpuaux[dim], flid, urk3);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, urk3);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic-viscoelastic.c:            rhs *= ns->par.dt;
hig-flow-step-electroosmotic-viscoelastic.c:            rhs += ns->cc.ucell;
hig-flow-step-electroosmotic-viscoelastic.c:            stn_reset(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-electroosmotic-viscoelastic.c:                real w  = -ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic-viscoelastic.c:            rhs *= ns->par.dt;
hig-flow-step-electroosmotic-viscoelastic.c:            rhs += ns->cc.ucell;
hig-flow-step-electroosmotic-viscoelastic.c:            stn_reset(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-electroosmotic-viscoelastic.c:                real w  = -0.5*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-electroosmotic-viscoelastic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic-viscoelastic.c:            rhs *= 0.5*ns->par.dt;
hig-flow-step-electroosmotic-viscoelastic.c:            rhs += 0.25*ns->par.dt*higflow_difusive_term(ns, fdelta);
hig-flow-step-electroosmotic-viscoelastic.c:            rhs += ns->cc.ucell;
hig-flow-step-electroosmotic-viscoelastic.c:            stn_reset(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-electroosmotic-viscoelastic.c:                real w  = -0.25*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            real uaux = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->dpuaux[dim], flid, uaux);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            higflow_computational_cell_electroosmotic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-electroosmotic-viscoelastic.c:            real uaux = dp_get_value(ns->dpuaux[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            rhs *= ns->par.dt/3.0;
hig-flow-step-electroosmotic-viscoelastic.c:            rhs += (4.0*uaux - ns->cc.ucell)/3.0;
hig-flow-step-electroosmotic-viscoelastic.c:            stn_reset(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-electroosmotic-viscoelastic.c:                real w  = - 1.0/3.0*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-electroosmotic-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter,alpha, ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-electroosmotic-viscoelastic.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-electroosmotic-viscoelastic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:        //Vec *vecu = slv_get_solution_vec(ns->slvu[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            real ustar = slv_get_xi(ns->slvu[dim], flid);
hig-flow-step-electroosmotic-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-electroosmotic-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-electroosmotic-viscoelastic.c:    switch (ns->ed.eo.contr.eo_model) {
hig-flow-step-electroosmotic-viscoelastic.c:           //higflow_electroosmotic_phi(ns); //phi calculado no ns-example-2d.c
hig-flow-step-electroosmotic-viscoelastic.c:    switch (ns->contr.tempdiscrtype) {
hig-flow-step-electroosmotic-viscoelastic.c:           higflow_explicit_euler_intermediate_velocity_electroosmotic(ns, ns->dpu, ns->dpustar);
hig-flow-step-electroosmotic-viscoelastic.c:           higflow_semi_implicit_bdf2_intermediate_velocity_electroosmotic(ns, ns->dpu, ns->dpustar);
hig-flow-step-electroosmotic-viscoelastic.c:    switch (ns->ed.ve.contr.discrtype) {
hig-flow-step-generalized-newtonian.c:    if ((ns->contr.flowtype == 1) || (ns->contr.flowtype == 3)) {
hig-flow-step-generalized-newtonian.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-generalized-newtonian.c:            sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-generalized-newtonian.c:                        ul   = compute_facet_u_left(sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-generalized-newtonian.c:                        ur   = compute_facet_u_right(sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-generalized-newtonian.c:                        //ul = compute_facet_u_4_corners_left(sfdu[dim], ccenter, cdelta, dim, dim2, 1.0, ns->dpu[dim], ns->stn, &infacetl);
hig-flow-step-generalized-newtonian.c:                        ul = compute_facet_u_4_left(sfdu[dim], ccenter, cdelta, dim, dim2, 1.0, ns->dpu[dim], ns->stn);
hig-flow-step-generalized-newtonian.c:                        //ur = compute_facet_u_4_corners_right(sfdu[dim], ccenter, cdelta, dim, dim2, 1.0, ns->dpu[dim], ns->stn, &infacetr);
hig-flow-step-generalized-newtonian.c:                        ur = compute_facet_u_4_right(sfdu[dim], ccenter, cdelta, dim, dim2, 1.0, ns->dpu[dim], ns->stn);
hig-flow-step-generalized-newtonian.c:                    if (ns->contr.flowtype == 1) {
hig-flow-step-generalized-newtonian.c:		        dp_set_value(ns->ed.gn.dpD[dim][dim2], clid, dudx);
hig-flow-step-generalized-newtonian.c:		        dp_set_value(ns->ed.ve.dpD[dim][dim2], clid, dudx);
hig-flow-step-generalized-newtonian.c:                if (ns->contr.flowtype == 1) {
hig-flow-step-generalized-newtonian.c:                    dp_sync(ns->ed.gn.dpD[dim][dim2]);
hig-flow-step-generalized-newtonian.c:                    dp_sync(ns->ed.ve.dpD[dim][dim2]);
hig-flow-step-generalized-newtonian.c:    if (ns->contr.flowtype == 1) {
hig-flow-step-generalized-newtonian.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-generalized-newtonian.c:            sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-generalized-newtonian.c:                    Du[dim][dim2] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.gn.dpD[dim][dim2], ns->stn);
hig-flow-step-generalized-newtonian.c:            real visc = ns->ed.visc.get_viscosity(ccenter, q, ns->par.t);
hig-flow-step-generalized-newtonian.c:            dp_set_value(ns->ed.visc.dpvisc, clid, visc);
hig-flow-step-generalized-newtonian.c:        dp_sync(ns->ed.visc.dpvisc);
hig-flow-step-generalized-newtonian.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-step-generalized-newtonian.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-generalized-newtonian.c:            higflow_computational_cell_gen_newt(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-generalized-newtonian.c:            real ustar = ns->cc.ucell + ns->par.dt * rhs;
hig-flow-step-generalized-newtonian.c:    higflow_explicit_euler_intermediate_velocity_gen_newt(ns, ns->dpu, ns->dpuaux);
hig-flow-step-generalized-newtonian.c:    higflow_explicit_euler_intermediate_velocity_gen_newt(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-generalized-newtonian.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-generalized-newtonian.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-generalized-newtonian.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-generalized-newtonian.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-generalized-newtonian.c:            dp_set_value(ns->dpustar[dim], flid, urk2);
hig-flow-step-generalized-newtonian.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-generalized-newtonian.c:    higflow_explicit_euler_intermediate_velocity_gen_newt(ns, ns->dpu, ns->dpuaux);
hig-flow-step-generalized-newtonian.c:    higflow_explicit_euler_intermediate_velocity_gen_newt(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-generalized-newtonian.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-generalized-newtonian.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-generalized-newtonian.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-generalized-newtonian.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-generalized-newtonian.c:            dp_set_value(ns->dpuaux[dim], flid, urk3);
hig-flow-step-generalized-newtonian.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-generalized-newtonian.c:    higflow_explicit_euler_intermediate_velocity_gen_newt(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-generalized-newtonian.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-generalized-newtonian.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-generalized-newtonian.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-generalized-newtonian.c:            dp_set_value(ns->dpustar[dim], flid, urk3);
hig-flow-step-generalized-newtonian.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-generalized-newtonian.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-generalized-newtonian.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-generalized-newtonian.c:            higflow_computational_cell_gen_newt(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-generalized-newtonian.c:            rhs *= ns->par.dt;
hig-flow-step-generalized-newtonian.c:            rhs += ns->cc.ucell;
hig-flow-step-generalized-newtonian.c:            stn_reset(ns->stn);
hig-flow-step-generalized-newtonian.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-generalized-newtonian.c:                real w = - ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-generalized-newtonian.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-generalized-newtonian.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-generalized-newtonian.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-generalized-newtonian.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-generalized-newtonian.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-generalized-newtonian.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-generalized-newtonian.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-generalized-newtonian.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-generalized-newtonian.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-generalized-newtonian.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-generalized-newtonian.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-generalized-newtonian.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-generalized-newtonian.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-generalized-newtonian.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-generalized-newtonian.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-generalized-newtonian.c:            higflow_computational_cell_gen_newt(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-generalized-newtonian.c:            rhs *= ns->par.dt;
hig-flow-step-generalized-newtonian.c:            rhs += ns->cc.ucell;
hig-flow-step-generalized-newtonian.c:            stn_reset(ns->stn);
hig-flow-step-generalized-newtonian.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-generalized-newtonian.c:                real w = - 0.5 * ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-generalized-newtonian.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-generalized-newtonian.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-generalized-newtonian.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-generalized-newtonian.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-generalized-newtonian.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-generalized-newtonian.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-generalized-newtonian.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-generalized-newtonian.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-generalized-newtonian.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-generalized-newtonian.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-generalized-newtonian.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-generalized-newtonian.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-generalized-newtonian.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-generalized-newtonian.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-generalized-newtonian.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-generalized-newtonian.c:            higflow_computational_cell_gen_newt(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-generalized-newtonian.c:            rhs *= 0.25*ns->par.dt;
hig-flow-step-generalized-newtonian.c:            rhs += ns->cc.ucell;
hig-flow-step-generalized-newtonian.c:            stn_reset(ns->stn);
hig-flow-step-generalized-newtonian.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-generalized-newtonian.c:                real w = - 0.25*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-generalized-newtonian.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-generalized-newtonian.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-generalized-newtonian.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-generalized-newtonian.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-generalized-newtonian.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-generalized-newtonian.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-generalized-newtonian.c:	    int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-generalized-newtonian.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-generalized-newtonian.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-generalized-newtonian.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-generalized-newtonian.c:            real uaux = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-generalized-newtonian.c:            dp_set_value(ns->dpuaux[dim], flid, uaux);
hig-flow-step-generalized-newtonian.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-generalized-newtonian.c:            higflow_computational_cell_gen_newt(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-generalized-newtonian.c:            real uaux = dp_get_value(ns->dpuaux[dim], flid);
hig-flow-step-generalized-newtonian.c:            rhs = (4.0*uaux - ns->cc.ucell)/3.0;
hig-flow-step-generalized-newtonian.c:            stn_reset(ns->stn);
hig-flow-step-generalized-newtonian.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-generalized-newtonian.c:                real w = - 1.0/3.0*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-generalized-newtonian.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-generalized-newtonian.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-generalized-newtonian.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-generalized-newtonian.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim], ns->stn);
hig-flow-step-generalized-newtonian.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-generalized-newtonian.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-generalized-newtonian.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-generalized-newtonian.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-generalized-newtonian.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-generalized-newtonian.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:        //Vec *vecu = slv_get_solution_vec(ns->slvu[dim]);
hig-flow-step-generalized-newtonian.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-generalized-newtonian.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-generalized-newtonian.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-generalized-newtonian.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-generalized-newtonian.c:    switch (ns->contr.tempdiscrtype) {
hig-flow-step-generalized-newtonian.c:           higflow_explicit_euler_intermediate_velocity_gen_newt(ns, ns->dpu, ns->dpustar);
hig-flow-step-generalized-newtonian.c:           higflow_semi_implicit_bdf2_intermediate_velocity_gen_newt(ns, ns->dpu, ns->dpustar);
hig-flow-step-multifase.c:    if (ns->contr.flowtype == 2) {
hig-flow-step-multifase.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-multifase.c:            sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-multifase.c:            real visc = ns->ed.visc.get_viscosity(ccenter, 0.0, ns->par.t);
hig-flow-step-multifase.c:            dp_set_value(ns->ed.visc.dpvisc, clid, visc);
hig-flow-step-multifase.c:	dp_sync(ns->ed.visc.dpvisc);
hig-flow-step-multifase.c:    if (ns->contr.flowtype == 2) {
hig-flow-step-multifase.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-multifase.c:            sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-multifase.c:            real dens = ns->ed.dens.get_density(ccenter, ns->par.t);
hig-flow-step-multifase.c:            dp_set_value(ns->ed.dens.dpdens, clid, dens);
hig-flow-step-multifase.c:        dp_sync(ns->ed.dens.dpdens);
hig-flow-step-multifase.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-multifase.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-multifase.c:            real rhol  = compute_center_p_left(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.dens.dpdens, ns->stn);
hig-flow-step-multifase.c:            real rhor  = compute_center_p_right(ns->ed.sdED, fcenter, fdelta, dim, 0.5, ns->ed.dens.dpdens, ns->stn);
hig-flow-step-multifase.c:            if (ns->contr.projtype == 1) {
hig-flow-step-multifase.c:                pl    = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->ddeltap, ns->stn);
hig-flow-step-multifase.c:                pr    = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->ddeltap, ns->stn);
hig-flow-step-multifase.c:                pl    = compute_center_p_left(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-step-multifase.c:                pr    = compute_center_p_right(sdp, fcenter, fdelta, dim, 0.5, ns->dpp, ns->stn);
hig-flow-step-multifase.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-multifase.c:            real utdt  = ustar - ns->par.dt*dpdx/rho;
hig-flow-step-multifase.c:            dp_set_value(ns->dpu[dim], flid, utdt);
hig-flow-step-multifase.c:        dp_sync(ns->dpu[dim]);
hig-flow-step-multifase.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-multifase.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-multifase.c:            real ustarl = compute_facet_u_left(sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpustar[dim], ns->stn, &infacet);
hig-flow-step-multifase.c:            real ustarr = compute_facet_u_right(sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpustar[dim], ns->stn, &infacet);
hig-flow-step-multifase.c:        stn_reset(ns->stn);
hig-flow-step-multifase.c:        stn_set_rhs(ns->stn, sumdudx / ns->par.dt);
hig-flow-step-multifase.c:            real rho    = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.dens.dpdens, ns->stn);
hig-flow-step-multifase.c:            real rhol   = compute_center_p_left(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.dens.dpdens, ns->stn);
hig-flow-step-multifase.c:            real rhor   = compute_center_p_right(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.dens.dpdens, ns->stn);
hig-flow-step-multifase.c:            sd_get_stencil(sdp, ccenter, p, w, ns->stn);
hig-flow-step-multifase.c:            sd_get_stencil(sdp, ccenter, p, w, ns->stn);
hig-flow-step-multifase.c:        sd_get_stencil(sdp, ccenter, ccenter, alpha, ns->stn);
hig-flow-step-multifase.c:        int *ids   = stn_get_ids(ns->stn);
hig-flow-step-multifase.c:        real *vals = stn_get_vals(ns->stn);
hig-flow-step-multifase.c:        int numelems = stn_get_numelems(ns->stn);
hig-flow-step-multifase.c:        int cgid = psd_get_global_id(ns->psdp, c);
hig-flow-step-multifase.c:        slv_set_bi(ns->slvp, cgid, stn_get_rhs(ns->stn));
hig-flow-step-multifase.c:        slv_set_Ai(ns->slvp, cgid, numelems, ids, vals);
hig-flow-step-multifase.c:    remove_pressure_singularity(ns, ns->slvp);
hig-flow-step-multifase.c:    slv_assemble(ns->slvp);
hig-flow-step-multifase.c:    slv_solve(ns->slvp);
hig-flow-step-multifase.c:    distributed_property *dp = (ns->contr.projtype == 1) ? ns->ddeltap : ns->dpp;
hig-flow-step-multifase.c:    dp_slv_load_from_solver(dp, ns->slvp);
hig-flow-step-multifase.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-step-multifase.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-multifase.c:            higflow_computational_cell_multifase(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-multifase.c:            real ustar = ns->cc.ucell + ns->par.dt * rhs;
hig-flow-step-multifase.c:    higflow_explicit_euler_intermediate_velocity_multifase(ns, ns->dpu, ns->dpuaux);
hig-flow-step-multifase.c:    higflow_explicit_euler_intermediate_velocity_multifase(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-multifase.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-multifase.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-multifase.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-multifase.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-multifase.c:            dp_set_value(ns->dpustar[dim], flid, urk2);
hig-flow-step-multifase.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-multifase.c:    higflow_explicit_euler_intermediate_velocity_multifase(ns, ns->dpu, ns->dpuaux);
hig-flow-step-multifase.c:    higflow_explicit_euler_intermediate_velocity_multifase(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-multifase.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-multifase.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-multifase.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-multifase.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-multifase.c:            dp_set_value(ns->dpuaux[dim], flid, urk3);
hig-flow-step-multifase.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-multifase.c:    higflow_explicit_euler_intermediate_velocity_multifase(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-multifase.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-multifase.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-multifase.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-multifase.c:            dp_set_value(ns->dpustar[dim], flid, urk3);
hig-flow-step-multifase.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-multifase.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-multifase.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-multifase.c:            higflow_computational_cell_multifase(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-multifase.c:            rhs *= ns->par.dt;
hig-flow-step-multifase.c:            rhs += ns->cc.ucell;
hig-flow-step-multifase.c:            stn_reset(ns->stn);
hig-flow-step-multifase.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-multifase.c:                real w = - ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-multifase.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-multifase.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-multifase.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-multifase.c:            int *ids   = stn_get_ids(ns->stn);
hig-flow-step-multifase.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-multifase.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-multifase.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-multifase.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-multifase.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-multifase.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-multifase.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-multifase.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-multifase.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-multifase.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-multifase.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-multifase.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-multifase.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-multifase.c:            higflow_computational_cell_multifase(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-multifase.c:            rhs *= ns->par.dt;
hig-flow-step-multifase.c:            rhs += ns->cc.ucell;
hig-flow-step-multifase.c:            stn_reset(ns->stn);
hig-flow-step-multifase.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-multifase.c:                real w = - 0.5 * ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-multifase.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-multifase.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-multifase.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-multifase.c:            int *ids   = stn_get_ids(ns->stn);
hig-flow-step-multifase.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-multifase.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-multifase.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-multifase.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-multifase.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-multifase.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-multifase.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-multifase.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-multifase.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-multifase.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-multifase.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-multifase.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-multifase.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-multifase.c:            higflow_computational_cell_multifase(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-multifase.c:            rhs *= 0.25*ns->par.dt;
hig-flow-step-multifase.c:            rhs += ns->cc.ucell;
hig-flow-step-multifase.c:            stn_reset(ns->stn);
hig-flow-step-multifase.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-multifase.c:                real w = - 0.25*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-multifase.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-multifase.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-multifase.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-multifase.c:            int *ids   = stn_get_ids(ns->stn);
hig-flow-step-multifase.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-multifase.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-multifase.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-multifase.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-multifase.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-multifase.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-multifase.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-multifase.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-multifase.c:            real uaux = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-multifase.c:            dp_set_value(ns->dpuaux[dim], flid, uaux);
hig-flow-step-multifase.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-multifase.c:            higflow_computational_cell_multifase(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-multifase.c:            real uaux = dp_get_value(ns->dpuaux[dim], flid);
hig-flow-step-multifase.c:            rhs = (4.0*uaux - ns->cc.ucell)/3.0;
hig-flow-step-multifase.c:            stn_reset(ns->stn);
hig-flow-step-multifase.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-multifase.c:                real w = - 1.0/3.0*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-multifase.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-multifase.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-multifase.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-multifase.c:            int *ids   = stn_get_ids(ns->stn);
hig-flow-step-multifase.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-multifase.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-multifase.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-multifase.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-multifase.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-multifase.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-multifase.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-multifase.c:        //Vec *vecu = slv_get_solution_vec(ns->slvu[dim]);
hig-flow-step-multifase.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-multifase.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-multifase.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-multifase.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-multifase.c:    switch (ns->contr.tempdiscrtype) {
hig-flow-step-multifase.c:           higflow_explicit_euler_intermediate_velocity_multifase(ns, ns->dpu, ns->dpustar);
hig-flow-step-multifase.c:           higflow_semi_implicit_bdf2_intermediate_velocity_multifase(ns, ns->dpu, ns->dpustar);
hig-flow-step-viscoelastic.c:    if (ns->contr.flowtype == 3) {
hig-flow-step-viscoelastic.c:        real Re   = ns->par.Re;
hig-flow-step-viscoelastic.c:        real De   = ns->ed.ve.par.De;
hig-flow-step-viscoelastic.c:        real beta = ns->ed.ve.par.beta;
hig-flow-step-viscoelastic.c:        real tol  = ns->ed.ve.par.kernel_tol;
hig-flow-step-viscoelastic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-viscoelastic.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                   dp_set_value(ns->ed.ve.dpKernel[i][j], clid, Kernel[i][j]);
hig-flow-step-viscoelastic.c:                dp_sync(ns->ed.ve.dpKernel[i][j]);
hig-flow-step-viscoelastic.c:    if (ns->contr.flowtype == 3) {
hig-flow-step-viscoelastic.c:        real Re   = ns->par.Re;
hig-flow-step-viscoelastic.c:        real De   = ns->ed.ve.par.De;
hig-flow-step-viscoelastic.c:        real beta = ns->ed.ve.par.beta;
hig-flow-step-viscoelastic.c:        real tol  = ns->ed.ve.par.kernel_tol;
hig-flow-step-viscoelastic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-viscoelastic.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                    Kernel[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                B[i][i] = ns->ed.ve.get_kernel_inverse(i, lambda[i], tol);
hig-flow-step-viscoelastic.c:                   dp_set_value(ns->ed.ve.dpS[i][j], clid, S[i][j]);
hig-flow-step-viscoelastic.c:                dp_sync(ns->ed.ve.dpS[i][j]);
hig-flow-step-viscoelastic.c:    if (ns->contr.flowtype == 3) {
hig-flow-step-viscoelastic.c:        real Re    = ns->par.Re;
hig-flow-step-viscoelastic.c:        real De    = ns->ed.ve.par.De;
hig-flow-step-viscoelastic.c:        real beta  = ns->ed.ve.par.beta;
hig-flow-step-viscoelastic.c:        real tol   = ns->ed.ve.par.kernel_tol;
hig-flow-step-viscoelastic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-viscoelastic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-viscoelastic.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                    Kernel[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:            switch (ns->ed.ve.contr.model) {
hig-flow-step-viscoelastic.c:                    ns->ed.ve.calculate_m_user(ns->par.Re, ns->ed.ve.par.De, ns->ed.ve.par.beta, tr, lambda, R, M, M_aux, tol);
hig-flow-step-viscoelastic.c:                    switch (ns->ed.ve.contr.convecdiscrtype) {
hig-flow-step-viscoelastic.c:                                rhs -= hig_flow_convective_tensor_term_cubista(ns, ns->dpu[dim], ns->ed.sdED, ns->ed.stn, Kernel, ccenter, cdelta, dim, i, j);
hig-flow-step-viscoelastic.c:                    real kernel  = Kernel[i][j] + ns->par.dt * rhs;
hig-flow-step-viscoelastic.c:                    dp_set_value(ns->ed.ve.dpS[i][j], clid, kernel);
hig-flow-step-viscoelastic.c:                         dp_set_value(ns->ed.ve.dpS[j][i], clid, kernel);
hig-flow-step-viscoelastic.c:                dp_sync(ns->ed.ve.dpS[i][j]);
hig-flow-step-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                    dp_set_value(ns->ed.ve.dpKernel[i][j], clid, S[i][j]);
hig-flow-step-viscoelastic.c:                dp_sync(ns->ed.ve.dpKernel[i][j]);
hig-flow-step-viscoelastic.c:    kl  = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_l); 
hig-flow-step-viscoelastic.c:    kr  = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_r); 
hig-flow-step-viscoelastic.c:    kll = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 2.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_ll);
hig-flow-step-viscoelastic.c:    krr = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 2.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_rr);
hig-flow-step-viscoelastic.c:    vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:            vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:            vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:    vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:            vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:            vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:    if (ns->contr.flowtype == 3) {
hig-flow-step-viscoelastic.c:        real dt    = ns->par.dt;
hig-flow-step-viscoelastic.c:        real Re    = ns->par.Re;
hig-flow-step-viscoelastic.c:        real De    = ns->ed.ve.par.De;
hig-flow-step-viscoelastic.c:        real beta  = ns->ed.ve.par.beta;
hig-flow-step-viscoelastic.c:        real tol   = ns->ed.ve.par.kernel_tol;
hig-flow-step-viscoelastic.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-viscoelastic.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-viscoelastic.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpD[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                    Kernel[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:            switch (ns->ed.ve.contr.model) {
hig-flow-step-viscoelastic.c:                    ns->ed.ve.calculate_m_user(ns->par.Re, ns->ed.ve.par.De, ns->ed.ve.par.beta, tr, lambda, R, M, M_aux, tol);
hig-flow-step-viscoelastic.c:                    switch (ns->ed.ve.contr.convecdiscrtype) {
hig-flow-step-viscoelastic.c:                                rhs -= hig_flow_convective_tensor_term_cubista(ns, ns->dpu[dim], ns->ed.sdED, ns->ed.stn, Kernel, ccenter, cdelta, dim, i, j);
hig-flow-step-viscoelastic.c:                    dp_set_value(ns->ed.ve.dpS[i][j], clid, kernel);
hig-flow-step-viscoelastic.c:                        dp_set_value(ns->ed.ve.dpS[j][i], clid, kernel);
hig-flow-step-viscoelastic.c:                dp_sync(ns->ed.ve.dpS[i][j]);
hig-flow-step-viscoelastic.c:                    S[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.ve.dpS[i][j], ns->ed.stn);
hig-flow-step-viscoelastic.c:                    dp_set_value(ns->ed.ve.dpKernel[i][j], clid, S[i][j]);
hig-flow-step-viscoelastic.c:                dp_sync(ns->ed.ve.dpKernel[i][j]);
hig-flow-step-viscoelastic.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic.c:            sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-viscoelastic.c:            higflow_computational_cell_viscoelastic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic.c:            real ustar = ns->cc.ucell + ns->par.dt * rhs;
hig-flow-step-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic(ns, ns->dpu, ns->dpuaux);
hig-flow-step-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-viscoelastic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-viscoelastic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, urk2);
hig-flow-step-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic(ns, ns->dpu, ns->dpuaux);
hig-flow-step-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-viscoelastic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-viscoelastic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-viscoelastic.c:            dp_set_value(ns->dpuaux[dim], flid, urk3);
hig-flow-step-viscoelastic.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-viscoelastic.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-viscoelastic.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-viscoelastic.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-viscoelastic.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, urk3);
hig-flow-step-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-viscoelastic.c:            higflow_computational_cell_viscoelastic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic.c:            rhs *= ns->par.dt;
hig-flow-step-viscoelastic.c:            rhs += ns->cc.ucell;
hig-flow-step-viscoelastic.c:            stn_reset(ns->stn);
hig-flow-step-viscoelastic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-viscoelastic.c:                real w = - ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-viscoelastic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim],ns->stn);
hig-flow-step-viscoelastic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-viscoelastic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-viscoelastic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-viscoelastic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-viscoelastic.c:            higflow_computational_cell_viscoelastic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic.c:            rhs *= ns->par.dt;
hig-flow-step-viscoelastic.c:            rhs += ns->cc.ucell;
hig-flow-step-viscoelastic.c:            stn_reset(ns->stn);
hig-flow-step-viscoelastic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-viscoelastic.c:                real w = - 0.5 * ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-viscoelastic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim],ns->stn);
hig-flow-step-viscoelastic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-viscoelastic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-viscoelastic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-viscoelastic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-viscoelastic.c:            higflow_computational_cell_viscoelastic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic.c:            rhs *= 0.25*ns->par.dt;
hig-flow-step-viscoelastic.c:            rhs += ns->cc.ucell;
hig-flow-step-viscoelastic.c:            stn_reset(ns->stn);
hig-flow-step-viscoelastic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-viscoelastic.c:                real w = - 0.25*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-viscoelastic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim],ns->stn);
hig-flow-step-viscoelastic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-viscoelastic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-viscoelastic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-viscoelastic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic.c:            real uaux = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-viscoelastic.c:            dp_set_value(ns->dpuaux[dim], flid, uaux);
hig-flow-step-viscoelastic.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-viscoelastic.c:            higflow_computational_cell_viscoelastic(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic.c:            real uaux = dp_get_value(ns->dpuaux[dim], flid);
hig-flow-step-viscoelastic.c:            rhs = (4.0*uaux - ns->cc.ucell)/3.0;
hig-flow-step-viscoelastic.c:            stn_reset(ns->stn);
hig-flow-step-viscoelastic.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-viscoelastic.c:                real w = - 1.0/3.0*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-viscoelastic.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim],ns->stn);
hig-flow-step-viscoelastic.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-viscoelastic.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-viscoelastic.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-viscoelastic.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:        //Vec *vecu = slv_get_solution_vec(ns->slvu[dim]);
hig-flow-step-viscoelastic.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-viscoelastic.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-viscoelastic.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic.c:    switch (ns->contr.tempdiscrtype) {
hig-flow-step-viscoelastic.c:           higflow_explicit_euler_intermediate_velocity_viscoelastic(ns, ns->dpu, ns->dpustar);
hig-flow-step-viscoelastic.c:           higflow_semi_implicit_bdf2_intermediate_velocity_viscoelastic(ns, ns->dpu, ns->dpustar);
hig-flow-step-viscoelastic.c:    switch (ns->ed.ve.contr.discrtype) {
hig-flow-step-viscoelastic.c:       Kernel_aux[i][i] = ns->ed.ve.get_kernel(i, lambda[i], tol);
hig-flow-step-viscoelastic.c:        real jlambda = ns->ed.ve.get_kernel_jacobian(i, lambda[i], tol);
hig-flow-step-viscoelastic.c:        real jlambda = ns->ed.ve.get_kernel_jacobian(i, lambda[i], tol);
hig-flow-step-viscoelastic.c:        real jlambda = ns->ed.ve.get_kernel_jacobian(i, lambda[i], tol);
hig-flow-step-viscoelastic.c:        M_aux[i][i]  = (aux - ns->ed.ve.par.alpha*aux*aux)*jlambda;
hig-flow-step-viscoelastic.c:        jlambda[i]   = ns->ed.ve.get_kernel_jacobian(i, lambda[i], tol);
hig-flow-step-viscoelastic.c:        M_aux[i][i]  = (1.0-lambda[i])*(1.0+(ns->ed.ve.par.epsilon*ns->par.Re*ns->ed.ve.par.De*tr)/(1.0-ns->ed.ve.par.beta))*jlambda[i];
hig-flow-step-viscoelastic.c:            M_aux[i][j] += -2.0*(B[i][j]-B[i][j]*lambda[j])*ns->ed.ve.par.De*ns->ed.ve.par.psi*jlambda[j];
hig-flow-step-viscoelastic.c:        real ul = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:        real ur = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic.c:        real Kleft = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_left);
hig-flow-step-viscoelastic.c:        real Kright = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.ve.dpKernel[i][j], ns->ed.stn, &incell_right);
hig-flow-step-viscoelastic-integral.c:    if (ns->contr.flowtype == 4) {
hig-flow-step-viscoelastic-integral.c:        real Re    = ns->par.Re;
hig-flow-step-viscoelastic-integral.c:        real De    = ns->ed.im.par.De;
hig-flow-step-viscoelastic-integral.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-viscoelastic-integral.c:            sfdu[i] = psfd_get_local_domain(ns->psfdu[i]);
hig-flow-step-viscoelastic-integral.c:                        Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpD[i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:                        B[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpB[k][i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:                        switch (ns->ed.im.contr.convecdiscrtype) {
hig-flow-step-viscoelastic-integral.c:                                    rhs -= hig_flow_convective_tensor_term_b_cubista(ns, ns->dpu[dim], ns->ed.sdED, ns->ed.stn, B, ccenter, cdelta, dim, k, i, j);
hig-flow-step-viscoelastic-integral.c:                        real b  = B[i][j] + ns->par.dt * rhs;
hig-flow-step-viscoelastic-integral.c:                        dp_set_value(ns->ed.im.dpS[i][j], clid, b);
hig-flow-step-viscoelastic-integral.c:                             dp_set_value(ns->ed.im.dpS[j][i], clid, b);
hig-flow-step-viscoelastic-integral.c:                    dp_sync(ns->ed.im.dpS[i][j]);
hig-flow-step-viscoelastic-integral.c:                  //      B[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpS[i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:                        B[i][j]  = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpS[i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:                        dp_set_value(ns->ed.im.dpB[k][i][j], clid, B[i][j]);
hig-flow-step-viscoelastic-integral.c:                    dp_sync(ns->ed.im.dpB[k][i][j]);
hig-flow-step-viscoelastic-integral.c:    dt    = ns->par.dt;
hig-flow-step-viscoelastic-integral.c:    t     = ns->par.t;
hig-flow-step-viscoelastic-integral.c:    beta  = ns->ed.im.par.beta;
hig-flow-step-viscoelastic-integral.c:    alpha = ns->ed.im.par.alpha;
hig-flow-step-viscoelastic-integral.c:    M     = ns->ed.im.par.M;
hig-flow-step-viscoelastic-integral.c:    De    = ns->ed.im.par.De;
hig-flow-step-viscoelastic-integral.c:    Re    = ns->par.Re;
hig-flow-step-viscoelastic-integral.c:       a[i]      = ns->ed.im.par.a[i];
hig-flow-step-viscoelastic-integral.c:       lambda[i] = ns->ed.im.par.lambda[i];
hig-flow-step-viscoelastic-integral.c:     if ( ns->par.step+1 <= Nnow){
hig-flow-step-viscoelastic-integral.c:       Nnow = ns->par.step+1;
hig-flow-step-viscoelastic-integral.c:          sold[k] = ns->ed.im.s[k];
hig-flow-step-viscoelastic-integral.c:     ns->ed.im.s[k] = s[k];
hig-flow-step-viscoelastic-integral.c:    sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-viscoelastic-integral.c:                 Bold[k][i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpB[k][i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:                 B[k][i][j]    = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpB[k][i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:                //  Bold[k][i][j] = ns->ed.im.dpB[k][i][j];
hig-flow-step-viscoelastic-integral.c:      if (ns->par.step+1 >= NDT) {
hig-flow-step-viscoelastic-integral.c:                dp_set_value(ns->ed.im.dpB[k][i][j], clid, B[k][i][j]);
hig-flow-step-viscoelastic-integral.c:                dp_sync(ns->ed.im.dpB[k][i][j]);
hig-flow-step-viscoelastic-integral.c:       if (ns->par.step+1 >=3){       
hig-flow-step-viscoelastic-integral.c:             Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpD[i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:              dp_set_value(ns->ed.im.dpS[i][j], clid, STensor);
hig-flow-step-viscoelastic-integral.c:         dp_sync(ns->ed.im.dpS[i][j]);
hig-flow-step-viscoelastic-integral.c:        real ul = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:        real ur = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:        real Bleft = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.im.dpB[k][i][j], ns->ed.stn, &incell_left);
hig-flow-step-viscoelastic-integral.c:        real Bright = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.im.dpB[k][i][j], ns->ed.stn, &incell_right);
hig-flow-step-viscoelastic-integral.c:    kl  = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.im.dpB[k][i][j], ns->ed.stn, &incell_l); 
hig-flow-step-viscoelastic-integral.c:    kr  = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 1.0, ns->ed.im.dpB[k][i][j], ns->ed.stn, &incell_r); 
hig-flow-step-viscoelastic-integral.c:    kll = compute_center_p_left_22(ns->ed.sdED, ccenter, cdelta, dim, 2.0, ns->ed.im.dpB[k][i][j], ns->ed.stn, &incell_ll);
hig-flow-step-viscoelastic-integral.c:    krr = compute_center_p_right_22(ns->ed.sdED, ccenter, cdelta, dim, 2.0, ns->ed.im.dpB[k][i][j], ns->ed.stn, &incell_rr);
hig-flow-step-viscoelastic-integral.c:    vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:            vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:            vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:    vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:            vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:            vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:                vbar[dim] = compute_facet_u_right(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:                vbar[dim] = compute_facet_u_left(ns->sfdu[dim], ccenter, cdelta, dim, 0.5, ns->dpu[dim], ns->stn, &infacet);
hig-flow-step-viscoelastic-integral.c:    sim_domain *sdp    = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic-integral.c:            sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-viscoelastic-integral.c:            higflow_computational_cell_viscoelastic_integral(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic-integral.c:            real ustar = ns->cc.ucell + ns->par.dt * rhs;
hig-flow-step-viscoelastic-integral.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic_integral(ns, ns->dpu, ns->dpuaux);
hig-flow-step-viscoelastic-integral.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic_integral(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-viscoelastic-integral.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic-integral.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-viscoelastic-integral.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-viscoelastic-integral.c:            dp_set_value(ns->dpustar[dim], flid, urk2);
hig-flow-step-viscoelastic-integral.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic-integral.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic_integral(ns, ns->dpu, ns->dpuaux);
hig-flow-step-viscoelastic-integral.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic_integral(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-viscoelastic-integral.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic-integral.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-viscoelastic-integral.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-viscoelastic-integral.c:            dp_set_value(ns->dpuaux[dim], flid, urk3);
hig-flow-step-viscoelastic-integral.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-viscoelastic-integral.c:    higflow_explicit_euler_intermediate_velocity_viscoelastic_integral(ns, ns->dpuaux, ns->dpustar);
hig-flow-step-viscoelastic-integral.c:        sfdu[dim] = psfd_get_local_domain(ns->psfdu[dim]);
hig-flow-step-viscoelastic-integral.c:            real u     = dp_get_value(ns->dpu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            real ustar = dp_get_value(ns->dpustar[dim], flid);
hig-flow-step-viscoelastic-integral.c:            dp_set_value(ns->dpustar[dim], flid, urk3);
hig-flow-step-viscoelastic-integral.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic-integral.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic-integral.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-viscoelastic-integral.c:            higflow_computational_cell_viscoelastic_integral(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic-integral.c:            rhs *= ns->par.dt;
hig-flow-step-viscoelastic-integral.c:            rhs += ns->cc.ucell;
hig-flow-step-viscoelastic-integral.c:            stn_reset(ns->stn);
hig-flow-step-viscoelastic-integral.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-viscoelastic-integral.c:                real w = - ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-viscoelastic-integral.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic-integral.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic-integral.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-viscoelastic-integral.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim],ns->stn);
hig-flow-step-viscoelastic-integral.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-viscoelastic-integral.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-viscoelastic-integral.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-viscoelastic-integral.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-viscoelastic-integral.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-viscoelastic-integral.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-viscoelastic-integral.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic-integral.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic-integral.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-viscoelastic-integral.c:            higflow_computational_cell_viscoelastic_integral(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic-integral.c:            rhs *= ns->par.dt;
hig-flow-step-viscoelastic-integral.c:            rhs += ns->cc.ucell;
hig-flow-step-viscoelastic-integral.c:            stn_reset(ns->stn);
hig-flow-step-viscoelastic-integral.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-viscoelastic-integral.c:                real w = - 0.5 * ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-viscoelastic-integral.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic-integral.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic-integral.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-viscoelastic-integral.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim],ns->stn);
hig-flow-step-viscoelastic-integral.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-viscoelastic-integral.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-viscoelastic-integral.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-viscoelastic-integral.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-viscoelastic-integral.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-viscoelastic-integral.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-viscoelastic-integral.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic-integral.c:    sim_domain *sdp = psd_get_local_domain(ns->psdp);
hig-flow-step-viscoelastic-integral.c:        sfdu[dim2] = psfd_get_local_domain(ns->psfdu[dim2]);
hig-flow-step-viscoelastic-integral.c:            higflow_computational_cell_viscoelastic_integral(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic-integral.c:            rhs *= 0.25*ns->par.dt;
hig-flow-step-viscoelastic-integral.c:            rhs += ns->cc.ucell;
hig-flow-step-viscoelastic-integral.c:            stn_reset(ns->stn);
hig-flow-step-viscoelastic-integral.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-viscoelastic-integral.c:                real w = - 0.25*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-viscoelastic-integral.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic-integral.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic-integral.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-viscoelastic-integral.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim],ns->stn);
hig-flow-step-viscoelastic-integral.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-viscoelastic-integral.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-viscoelastic-integral.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-viscoelastic-integral.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-viscoelastic-integral.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            real uaux = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-viscoelastic-integral.c:            dp_set_value(ns->dpuaux[dim], flid, uaux);
hig-flow-step-viscoelastic-integral.c:        dp_sync(ns->dpuaux[dim]);
hig-flow-step-viscoelastic-integral.c:            higflow_computational_cell_viscoelastic_integral(ns, sdp, sfdu, flid, fcenter, fdelta, dim, ns->dpu);
hig-flow-step-viscoelastic-integral.c:            real uaux = dp_get_value(ns->dpuaux[dim], flid);
hig-flow-step-viscoelastic-integral.c:            rhs = (4.0*uaux - ns->cc.ucell)/3.0;
hig-flow-step-viscoelastic-integral.c:            stn_reset(ns->stn);
hig-flow-step-viscoelastic-integral.c:            stn_set_rhs(ns->stn,rhs);
hig-flow-step-viscoelastic-integral.c:                real w = - 1.0/3.0*ns->par.dt/(ns->par.Re*fdelta[dim2]*fdelta[dim2]);
hig-flow-step-viscoelastic-integral.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic-integral.c:                sfd_get_stencil(sfdu[dim], fcenter, p, w, ns->stn);
hig-flow-step-viscoelastic-integral.c:            sfd_get_stencil(sfdu[dim], fcenter, fcenter, alpha, ns->stn);
hig-flow-step-viscoelastic-integral.c:            int *ids   = psfd_stn_get_gids(ns->psfdu[dim],ns->stn);
hig-flow-step-viscoelastic-integral.c:            real *vals = stn_get_vals(ns->stn);
hig-flow-step-viscoelastic-integral.c:            int numelems = stn_get_numelems(ns->stn);
hig-flow-step-viscoelastic-integral.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            slv_set_bi(ns->slvu[dim], fgid, stn_get_rhs(ns->stn));
hig-flow-step-viscoelastic-integral.c:            slv_set_Ai(ns->slvu[dim], fgid, numelems, ids, vals);
hig-flow-step-viscoelastic-integral.c:        slv_assemble(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:        slv_solve(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:        //Vec *vecu = slv_get_solution_vec(ns->slvu[dim]);
hig-flow-step-viscoelastic-integral.c:            int fgid = psfd_lid_to_gid(ns->psfdu[dim], flid);
hig-flow-step-viscoelastic-integral.c:            real ustar = slv_get_xi(ns->slvu[dim], fgid);
hig-flow-step-viscoelastic-integral.c:            dp_set_value(ns->dpustar[dim], flid, ustar);
hig-flow-step-viscoelastic-integral.c:        dp_sync(ns->dpustar[dim]);
hig-flow-step-viscoelastic-integral.c:    if (ns->contr.flowtype == 4) {
hig-flow-step-viscoelastic-integral.c:        real Re   = ns->par.Re;
hig-flow-step-viscoelastic-integral.c:        sim_domain *sdp = psd_get_local_domain(ns->ed.psdED);
hig-flow-step-viscoelastic-integral.c:                    Du[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpD[i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:                    S[i][j] = compute_value_at_point(ns->ed.sdED, ccenter, ccenter, 1.0, ns->ed.im.dpS[i][j], ns->ed.stn);
hig-flow-step-viscoelastic-integral.c:    switch (ns->contr.tempdiscrtype) {
hig-flow-step-viscoelastic-integral.c:           higflow_explicit_euler_intermediate_velocity_viscoelastic_integral(ns, ns->dpu, ns->dpustar);
hig-flow-step-viscoelastic-integral.c:           higflow_semi_implicit_bdf2_intermediate_velocity_viscoelastic_integral(ns, ns->dpu, ns->dpustar);
hig-flow-terms.c:    if (ns->contr.projtype == 1) {
hig-flow-terms.c:       value = ns->cc.dpdx;
hig-flow-terms.c:       if (ns->contr.flowtype == 2) {
hig-flow-terms.c:           value /= ns->cc.dens;
hig-flow-terms.c:    real value = ns->cc.F;
hig-flow-terms.c:    if (ns->contr.flowtype == 2) {
hig-flow-terms.c:        value /= ns->cc.dens;
hig-flow-terms.c:    if (ns->contr.flowtype == 3) {
hig-flow-terms.c:            value += ns->cc.dSdx[dim2];
hig-flow-terms.c:    if (ns->contr.flowtype == 4) {
hig-flow-terms.c:            value += ns->cc.dSdx[dim2];
hig-flow-terms.c:        value += (ns->cc.v[dim2]+fabs(ns->cc.v[dim2]))*0.1875*ns->cc.dudxl[dim2]; 
hig-flow-terms.c:        value += (ns->cc.v[dim2]+fabs(ns->cc.v[dim2]))*0.3750*ns->cc.dudxr[dim2];        
hig-flow-terms.c:        value -= (ns->cc.v[dim2]+fabs(ns->cc.v[dim2]))*0.0625*ns->cc.dudxrr[dim2];    
hig-flow-terms.c:        value += (ns->cc.v[dim2]-fabs(ns->cc.v[dim2]))*0.3750*ns->cc.dudxl[dim2]; 
hig-flow-terms.c:        value += (ns->cc.v[dim2]-fabs(ns->cc.v[dim2]))*0.1875*ns->cc.dudxr[dim2];    
hig-flow-terms.c:        value -= (ns->cc.v[dim2]-fabs(ns->cc.v[dim2]))*0.0625*ns->cc.dudxll[dim2];
hig-flow-terms.c:        value += ns->cc.vc[dim2];
hig-flow-terms.c:        value += 0.5*(ns->cc.v[dim2]+fabs(ns->cc.v[dim2]))*ns->cc.dudxl[dim2];
hig-flow-terms.c:        value += 0.5*(ns->cc.v[dim2]-fabs(ns->cc.v[dim2]))*ns->cc.dudxr[dim2];
hig-flow-terms.c:        if (ns->cc.v[dim2] > 0.0) {
hig-flow-terms.c:            if (fabs(ns->cc.dudxl[dim2]) > 1.0e-8) {
hig-flow-terms.c:                value += 0.5*ns->cc.v[dim2]*delta[dim2]*ns->cc.du2dx2[dim2]/ns->cc.dudxl[dim2];
hig-flow-terms.c:            if (fabs(ns->cc.dudxr[dim2]) > 1.0e-8) {
hig-flow-terms.c:                value -= 0.5*ns->cc.v[dim2]*delta[dim2]*ns->cc.du2dx2[dim2]/ns->cc.dudxr[dim2];
hig-flow-terms.c:    switch (ns->contr.secondconvecdiscrtype) {
hig-flow-terms.c:        value += 0.5*(ns->cc.v[dim2]+fabs(ns->cc.v[dim2]))*ns->cc.dudxl[dim2];
hig-flow-terms.c:        value += 0.5*(ns->cc.v[dim2]-fabs(ns->cc.v[dim2]))*ns->cc.dudxr[dim2];
hig-flow-terms.c:        value += ns->cc.v[dim2]*ns->cc.dudxc[dim2];
hig-flow-terms.c:    switch (ns->cc.convec_type) {
hig-flow-terms.c:    switch (ns->contr.flowtype) {
hig-flow-terms.c:               value += ns->cc.du2dx2[dim2];
hig-flow-terms.c:           value /= ns->par.Re;
hig-flow-terms.c:               value += ns->cc.du2dx2[dim2];
hig-flow-terms.c:           value /= ns->par.Re;
hig-flow-terms.c:               value += ns->cc.du2dx2[dim2];
hig-flow-terms.c:           value /= ns->par.Re;
hig-flow-terms.c:           value /= ns->cc.dens;
hig-flow-terms.c:               value += ns->cc.du2dx2[dim2];
hig-flow-terms.c:           value /= ns->par.Re;
hig-flow-terms.c:               value += ns->cc.du2dx2[dim2];
hig-flow-terms.c:           value /= ns->par.Re;
hig-flow-terms.c:    real value = ns->cc.Feo;
hig-flow-terms.c:    real value = ns->cc.d2ndx2/ns->ed.eo.par.Pe;
hig-flow-terms.c:    value   = ns->cc.dndx*(ns->cc.dphidx + ns->cc.dpsidx) + ns->cc.ncell*(ns->cc.d2psidx2 + ns->cc.d2phidx2);
hig-flow-terms.c:    value   *= ns->ed.eo.par.alpha/ns->ed.eo.par.Pe;
